{
    "project": {
        "name": "Breakout",
        "description": "breakoutjs.com",
        "version": "0.3.0"
    },
    "files": {
        "src/core/I2CBase.js": {
            "name": "src/core/I2CBase.js",
            "modules": {},
            "classes": {
                "BO.I2CBase": 1
            },
            "fors": {},
            "namespaces": {
                "BO": 1
            }
        },
        "src/core/IOBoard.js": {
            "name": "src/core/IOBoard.js",
            "modules": {},
            "classes": {
                "BO.IOBoard": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/IOBoardEvent.js": {
            "name": "src/core/IOBoardEvent.js",
            "modules": {},
            "classes": {
                "BO.IOBoardEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/PhysicalInputBase.js": {
            "name": "src/core/PhysicalInputBase.js",
            "modules": {},
            "classes": {
                "BO.PhysicalInputBase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/Pin.js": {
            "name": "src/core/Pin.js",
            "modules": {},
            "classes": {
                "BO.Pin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/PinEvent.js": {
            "name": "src/core/PinEvent.js",
            "modules": {},
            "classes": {
                "BO.PinEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/WSocketEvent.js": {
            "name": "src/core/WSocketEvent.js",
            "modules": {},
            "classes": {
                "BO.WSocketEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/WSocketWrapper.js": {
            "name": "src/core/WSocketWrapper.js",
            "modules": {},
            "classes": {
                "BO.WSocketWrapper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/core.js": {
            "name": "src/core/core.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "BO": 1
            }
        },
        "src/custom/ID12RFIDReader.js": {
            "name": "src/custom/ID12RFIDReader.js",
            "modules": {},
            "classes": {
                "BO.custom.ID12RFIDReader": 1
            },
            "fors": {},
            "namespaces": {
                "BO.custom": 1
            }
        },
        "src/custom/RFIDEvent.js": {
            "name": "src/custom/RFIDEvent.js",
            "modules": {},
            "classes": {
                "BO.custom.RFIDEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/filters/Convolution.js": {
            "name": "src/filters/Convolution.js",
            "modules": {},
            "classes": {
                "BO.filters.Convolution": 1
            },
            "fors": {},
            "namespaces": {
                "BO.filters": 1
            }
        },
        "src/filters/FilterBase.js": {
            "name": "src/filters/FilterBase.js",
            "modules": {},
            "classes": {
                "BO.filters.FilterBase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/filters/Scaler.js": {
            "name": "src/filters/Scaler.js",
            "modules": {},
            "classes": {
                "BO.filters.Scaler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/filters/TriggerPoint.js": {
            "name": "src/filters/TriggerPoint.js",
            "modules": {},
            "classes": {
                "BO.filters.TriggerPoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/generators/GeneratorBase.js": {
            "name": "src/generators/GeneratorBase.js",
            "modules": {},
            "classes": {
                "BO.generators.GeneratorBase": 1
            },
            "fors": {},
            "namespaces": {
                "BO.generators": 1
            }
        },
        "src/generators/GeneratorEvent.js": {
            "name": "src/generators/GeneratorEvent.js",
            "modules": {},
            "classes": {
                "BO.generators.GeneratorEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/generators/Oscillator.js": {
            "name": "src/generators/Oscillator.js",
            "modules": {},
            "classes": {
                "BO.generators.Oscillator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/AccelerometerADXL345.js": {
            "name": "src/io/AccelerometerADXL345.js",
            "modules": {},
            "classes": {
                "BO.io.AccelerometerADXL345": 1
            },
            "fors": {},
            "namespaces": {
                "BO.io": 1
            }
        },
        "src/io/AccelerometerEvent.js": {
            "name": "src/io/AccelerometerEvent.js",
            "modules": {},
            "classes": {
                "BO.io.AccelerometerEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/AnalogAccelerometer.js": {
            "name": "src/io/AnalogAccelerometer.js",
            "modules": {},
            "classes": {
                "BO.io.AnalogAccelerometer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/BiColorLED.js": {
            "name": "src/io/BiColorLED.js",
            "modules": {},
            "classes": {
                "BO.io.BiColorLED": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/BlinkM.js": {
            "name": "src/io/BlinkM.js",
            "modules": {},
            "classes": {
                "BO.io.BlinkM": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/Button.js": {
            "name": "src/io/Button.js",
            "modules": {},
            "classes": {
                "BO.io.Button": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/ButtonEvent.js": {
            "name": "src/io/ButtonEvent.js",
            "modules": {},
            "classes": {
                "BO.io.ButtonEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/CompassEvent.js": {
            "name": "src/io/CompassEvent.js",
            "modules": {},
            "classes": {
                "BO.io.CompassEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/CompassHMC6352.js": {
            "name": "src/io/CompassHMC6352.js",
            "modules": {},
            "classes": {
                "BO.io.CompassHMC6352": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/DCMotor.js": {
            "name": "src/io/DCMotor.js",
            "modules": {},
            "classes": {
                "BO.io.DCMotor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/GyroEvent.js": {
            "name": "src/io/GyroEvent.js",
            "modules": {},
            "classes": {
                "BO.io.GyroEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/GyroITG3200.js": {
            "name": "src/io/GyroITG3200.js",
            "modules": {},
            "classes": {
                "BO.io.GyroITG3200": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/LED.js": {
            "name": "src/io/LED.js",
            "modules": {},
            "classes": {
                "BO.io.LED": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/MagnetoMeterHMC5883.js": {
            "name": "src/io/MagnetoMeterHMC5883.js",
            "modules": {},
            "classes": {
                "BO.io.MagnetometerHMC5883": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/MagnetometerEvent.js": {
            "name": "src/io/MagnetometerEvent.js",
            "modules": {},
            "classes": {
                "BO.io.MagnetometerEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/PotEvent.js": {
            "name": "src/io/PotEvent.js",
            "modules": {},
            "classes": {
                "BO.io.PotEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/Potentiometer.js": {
            "name": "src/io/Potentiometer.js",
            "modules": {},
            "classes": {
                "BO.io.Potentiometer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/RGBLED.js": {
            "name": "src/io/RGBLED.js",
            "modules": {},
            "classes": {
                "BO.io.RGBLED": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/Servo.js": {
            "name": "src/io/Servo.js",
            "modules": {},
            "classes": {
                "BO.io.Servo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/SoftPot.js": {
            "name": "src/io/SoftPot.js",
            "modules": {},
            "classes": {
                "BO.io.SoftPot": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/SoftPotEvent.js": {
            "name": "src/io/SoftPotEvent.js",
            "modules": {},
            "classes": {
                "BO.io.SoftPotEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/Stepper.js": {
            "name": "src/io/Stepper.js",
            "modules": {},
            "classes": {
                "BO.io.Stepper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/Event.js": {
            "name": "src/utils/Event.js",
            "modules": {},
            "classes": {
                "JSUTILS.Event": 1
            },
            "fors": {},
            "namespaces": {
                "JSUTILS": 1
            }
        },
        "src/utils/EventDispatcher.js": {
            "name": "src/utils/EventDispatcher.js",
            "modules": {},
            "classes": {
                "JSUTILS.EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/JSUTILS.js": {
            "name": "src/utils/JSUTILS.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "JSUTILS": 1
            }
        },
        "src/utils/SignalScope.js": {
            "name": "src/utils/SignalScope.js",
            "modules": {},
            "classes": {
                "JSUTILS.SignalScope": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/Timer.js": {
            "name": "src/utils/Timer.js",
            "modules": {},
            "classes": {
                "JSUTILS.Timer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/TimerEvent.js": {
            "name": "src/utils/TimerEvent.js",
            "modules": {},
            "classes": {
                "JSUTILS.TimerEvent": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "BO.I2CBase": {
            "name": "BO.I2CBase",
            "shortname": "I2CBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO",
            "file": "src/core/I2CBase.js",
            "line": 21,
            "description": "A base class for I2C objects. Extend this class when creating an\ninterface for a new I2C device. I2CBase should not be instantiated\ndirectly.",
            "is_constructor": 1,
            "uses": [
                "JSUTILS.EventDispatcher"
            ],
            "params": [
                {
                    "name": "board",
                    "description": "A reference to the IOBoard instance",
                    "type": "IOBoard"
                },
                {
                    "name": "address",
                    "description": "The I2C address of the device",
                    "type": "Number"
                },
                {
                    "name": "delayUS",
                    "description": "The number of microseconds ...",
                    "type": "Number"
                }
            ]
        },
        "BO.IOBoard": {
            "name": "BO.IOBoard",
            "shortname": "IOBoard",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO",
            "file": "src/core/IOBoard.js",
            "line": 55,
            "description": "Creates an interface to the I/O board. The IOBoard object brokers\nthe communication between your application and the physical I/O board.\nCurrently you can only connect to a single I/O board per computer.\nHowever you could connect to multiple I/O boards if they are attached to\nmultiple computers on your network. In that case you would create a\nseparate IOBoard instance for each board you are connecting to in your\nnetwork.",
            "is_constructor": 1,
            "uses": [
                "JSUTILS.EventDispatcher"
            ],
            "params": [
                {
                    "name": "host",
                    "description": "The host address of the web server.",
                    "type": "String"
                },
                {
                    "name": "port",
                    "description": "The port to connect to on the web server.\nDefault = false.",
                    "type": "Number"
                },
                {
                    "name": "protocol",
                    "description": "[optional] The websockt protocol definition \n(if necessary).",
                    "type": "String"
                }
            ]
        },
        "BO.IOBoardEvent": {
            "name": "BO.IOBoardEvent",
            "shortname": "IOBoardEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO",
            "file": "src/core/IOBoardEvent.js",
            "line": 15,
            "description": "An Event object to be dispatched (fired) by the IOBoard object.\nThe most important event is the READY event which signifies that the\nI/O board is ready to receive commands from the application. Many of the\nother IOBoard events are used when creating new io component objects.",
            "is_constructor": 1,
            "extends": "JSUTILS.Event",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                }
            ]
        },
        "BO.PhysicalInputBase": {
            "name": "BO.PhysicalInputBase",
            "shortname": "PhysicalInputBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO",
            "file": "src/core/PhysicalInputBase.js",
            "line": 21,
            "description": "A base class for physical input objects. Extend this class to\ncreate new digital or analog input objects. Treat this class as\nan abstract base class. It should not be instantiated directly.",
            "is_constructor": 1,
            "uses": [
                "JSUTILS.EventDispatcher"
            ]
        },
        "BO.Pin": {
            "name": "BO.Pin",
            "shortname": "Pin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO",
            "file": "src/core/Pin.js",
            "line": 23,
            "description": "Each analog and digital pin of the physical I/O board is \nrepresented by a Pin object.\nThe Pin object is the foundation for many of the io objects and is also \nvery useful on its own. See the Using The Pin Object Guide on \n[http://breakoutjs.com](http://breakoutjs.com) for a detailed overview.",
            "is_constructor": 1,
            "uses": [
                "JSUTILS.EventDispatcher"
            ],
            "params": [
                {
                    "name": "number",
                    "description": "The pin number",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "The type of pin",
                    "type": "Number"
                }
            ]
        },
        "BO.PinEvent": {
            "name": "BO.PinEvent",
            "shortname": "PinEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO",
            "file": "src/core/PinEvent.js",
            "line": 15,
            "description": "An Event object to be dispatched (fired) by a Pin object.",
            "is_constructor": 1,
            "extends": "JSUTILS.Event",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                }
            ]
        },
        "BO.WSocketEvent": {
            "name": "BO.WSocketEvent",
            "shortname": "WSocketEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO",
            "file": "src/core/WSocketEvent.js",
            "line": 15,
            "description": "Dispatches Websocket events: Connected `onopen`, Message `onmessge`\nand Closed `onclose` objects.",
            "is_constructor": 1,
            "extends": "JSUTILS.Event",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                }
            ]
        },
        "BO.WSocketWrapper": {
            "name": "BO.WSocketWrapper",
            "shortname": "WSocketWrapper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO",
            "file": "src/core/WSocketWrapper.js",
            "line": 17,
            "description": "Creates a wrapper for various websocket implementations to unify the\ninterface.",
            "is_constructor": 1,
            "uses": [
                "JSUTILS.EventDispatcher"
            ],
            "params": [
                {
                    "name": "host",
                    "description": "The host address of the web server.",
                    "type": "String"
                },
                {
                    "name": "port",
                    "description": "The port to connect to on the web server.\nnative websocket implementation.",
                    "type": "Number"
                },
                {
                    "name": "protocol",
                    "description": "The websockt protocol definition (if necessary).",
                    "type": "String"
                }
            ]
        },
        "BO.custom.ID12RFIDReader": {
            "name": "BO.custom.ID12RFIDReader",
            "shortname": "ID12RFIDReader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.custom",
            "file": "src/custom/ID12RFIDReader.js",
            "line": 25,
            "description": "Creates an interface to an ID-12 RFID Reader. Other Innovations\nRFID readers will likely work but have not been tested. This object\nrequires firmware other than StandardFirmata to be uploaded to the I/O board.\nSee [Breakout/custom\\_examples/rfid_example1.html](https://github.com/soundanalogous/Breakout/blob/master/custom_examples/rfid_example1.html) \nand [rfid\\_example2.html](https://github.com/soundanalogous/Breakout/blob/master/custom_examples/rfid_example2.html) for\nexample applications.\n\n<p>To use this object with standard io objects in Breakout, \nRFIDFirmata must be uploaded to the IOBoard rather than StandardFirmata. \nSee custom_examples/readme.txt for insturctions.</p>\n\n<p>Is is also possible to create a custom application for your\nIOBoard that includes the RFID reader. See IDx_Reader_Firmata_Example\nin the IDxRFIDReader library example files.</p>",
            "is_constructor": 1,
            "uses": [
                "JSUTILS.EventDispatcher"
            ],
            "params": [
                {
                    "name": "board",
                    "description": "A reference to the IOBoard instance",
                    "type": "IOBoard"
                },
                {
                    "name": "readerId",
                    "description": "The ID assigned to the reader in the firmware\nrunning on the IOBoard (default = 13)",
                    "type": "Number"
                }
            ]
        },
        "BO.custom.RFIDEvent": {
            "name": "BO.custom.RFIDEvent",
            "shortname": "RFIDEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.custom",
            "file": "src/custom/RFIDEvent.js",
            "line": 16,
            "description": "An Event object to be dispatched when an RFID tag is read or when an RFID\ntag is removed from a reader.",
            "is_constructor": 1,
            "extends": "JSUTILS.Event",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "tag",
                    "description": "The RFID tag value (hexadecimal)",
                    "type": "String"
                }
            ]
        },
        "BO.filters.Convolution": {
            "name": "BO.filters.Convolution",
            "shortname": "Convolution",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.filters",
            "file": "src/filters/Convolution.js",
            "line": 25,
            "description": "The Convolution object performs low-pass, high-pass and moving average\nfiltering on an analog input.\nSee [Breakout/examples/filters/convolution.html](https://github.com/soundanalogous/Breakout/blob/master/examples/filters/convolution.html) for an example application.",
            "is_constructor": 1,
            "extends": "BO.filters.FilterBase",
            "params": [
                {
                    "name": "kernel",
                    "description": "An array of coefficients to be used with product-sum\noperations for input buffers.",
                    "type": "Number[]"
                }
            ]
        },
        "BO.filters.FilterBase": {
            "name": "BO.filters.FilterBase",
            "shortname": "FilterBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.filters",
            "file": "src/filters/FilterBase.js",
            "line": 19,
            "description": "A base object to be extended by all Filter objects. This object\nshould not be instantiated directly.",
            "is_constructor": 1
        },
        "BO.filters.Scaler": {
            "name": "BO.filters.Scaler",
            "shortname": "Scaler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.filters",
            "file": "src/filters/Scaler.js",
            "line": 22,
            "description": "Scales up an input value from its min and max range to a specified \nminimum to maximum range. See [Breakout/examples/filters/scaler.html](https://github.com/soundanalogous/Breakout/blob/master/examples/filters/scaler.html) for\nan example application.",
            "is_constructor": 1,
            "extends": "BO.filters.FilterBase",
            "params": [
                {
                    "name": "inMin",
                    "description": "minimum input value",
                    "type": "Number"
                },
                {
                    "name": "inMax",
                    "description": "maximum input value",
                    "type": "Number"
                },
                {
                    "name": "outMin",
                    "description": "minimum output value",
                    "type": "Number"
                },
                {
                    "name": "outMax",
                    "description": "maximum output value",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "The function used to map the input curve",
                    "type": "Function"
                },
                {
                    "name": "limiter",
                    "description": "Whether or not to restrict the input value if it\nexceeds the specified range.",
                    "type": "Boolean"
                }
            ]
        },
        "BO.filters.TriggerPoint": {
            "name": "BO.filters.TriggerPoint",
            "shortname": "TriggerPoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.filters",
            "file": "src/filters/TriggerPoint.js",
            "line": 22,
            "description": "Divides an input to 0 or 1 based on the threshold and hysteresis. You can\nalso use multiple points by providing a nested array such as `[[0.4, 0.1],\n[0.7, 0.05]]`.\nSee [Breakout/examples/filters/triggerpoint.html](https://github.com/soundanalogous/Breakout/blob/master/examples/filters/triggerpoint.html) for an example application.",
            "is_constructor": 1,
            "extends": "BO.filters.FilterBase",
            "params": [
                {
                    "name": "points",
                    "description": "An array of threshold and hysteresis values\noperations for input buffers.",
                    "type": "Number[]"
                }
            ]
        },
        "BO.generators.GeneratorBase": {
            "name": "BO.generators.GeneratorBase",
            "shortname": "GeneratorBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.generators",
            "file": "src/generators/GeneratorBase.js",
            "line": 25,
            "description": "A base object to be extended by all Generator objects. This object should\nnot be instantiated directly.",
            "is_constructor": 1,
            "extends": "JSUTILS.EventDispatcher"
        },
        "BO.generators.GeneratorEvent": {
            "name": "BO.generators.GeneratorEvent",
            "shortname": "GeneratorEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.generators",
            "file": "src/generators/GeneratorEvent.js",
            "line": 22,
            "description": "An Event object to be dispatched (fired) by a Generator object when its\nvalue has updated.",
            "is_constructor": 1,
            "extends": "JSUTILS.Event",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                }
            ]
        },
        "BO.generators.Oscillator": {
            "name": "BO.generators.Oscillator",
            "shortname": "Oscillator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.generators",
            "file": "src/generators/Oscillator.js",
            "line": 25,
            "description": "The Oscillator object can be attached to a Pin or LED object to output\na waveform. This is useful for blinking an LED or fading it on and off. In\nmost cases (unless you are simply using it to blink and LED on or off), \nthe Oscillator should be attached to a Pin or LED object associated with\na PWM pin on the I/O board.\nSee [Breakout/examples/generators/oscillator.html](https://github.com/soundanalogous/Breakout/blob/master/examples/generators/oscillator.html) for an example application.",
            "is_constructor": 1,
            "extends": "BO.generators.GeneratorBase",
            "params": [
                {
                    "name": "wave",
                    "description": "waveform",
                    "type": "Number"
                },
                {
                    "name": "freq",
                    "description": "frequency",
                    "type": "Number"
                },
                {
                    "name": "amplitude",
                    "description": "amplitude",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "offset",
                    "type": "Number"
                },
                {
                    "name": "phase",
                    "description": "phase",
                    "type": "Number"
                },
                {
                    "name": "times",
                    "description": "The repeat count from 0 to infinite.",
                    "type": "Number"
                }
            ]
        },
        "BO.io.AccelerometerADXL345": {
            "name": "BO.io.AccelerometerADXL345",
            "shortname": "AccelerometerADXL345",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/AccelerometerADXL345.js",
            "line": 31,
            "description": "Creates an interface to an ADXL345 3-axis accelerometer. Use the\naccelerometer to read the acceleration along the x, y, and z axis of an \nobject it is attached to. You can also obtain the pitch and roll. See the\nexample in [Breakout/examples/sensors/adxl345.html](https://github.com/soundanalogous/Breakout/blob/master/examples/sensors/adxl345.html).",
            "is_constructor": 1,
            "extends": "BO.I2CBase",
            "params": [
                {
                    "name": "board",
                    "description": "The IOBoard instance",
                    "type": "IOBoard"
                },
                {
                    "name": "range",
                    "description": "The dynamic range selection in Gs (options `RANGE_2G`, `RANGE_4G`, \n`RANGE_8G`, `RANGE_16G`). Default is `RANGE_2G`.",
                    "type": "Number"
                },
                {
                    "name": "address",
                    "description": "The i2c address of the accelerometer (default is 0x53)",
                    "type": "Number"
                }
            ]
        },
        "BO.io.AccelerometerEvent": {
            "name": "BO.io.AccelerometerEvent",
            "shortname": "AccelerometerEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/AccelerometerEvent.js",
            "line": 15,
            "description": "An Event object to be dispatched (fired) by an Accelerometer object.",
            "is_constructor": 1,
            "extends": "JSUTILS.Event",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                }
            ]
        },
        "BO.io.AnalogAccelerometer": {
            "name": "BO.io.AnalogAccelerometer",
            "shortname": "AnalogAccelerometer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/AnalogAccelerometer.js",
            "line": 29,
            "description": "Creates an interface to an analog accelerometer. Use the\naccelerometer to read the acceleration along the x, y, and z axis of an \nobject it is attached to. You can also obtain the pitch and roll. This\nobject should interface with most analog accelerometers. See\n[Breakout/examples/sensors/analog\\_accelerometer.html](https://github.com/soundanalogous/Breakout/blob/master/examples/sensors/analog_accelerometer.html) and \n[Breakout/examples/three\\_js/accelerometer.html](https://github.com/soundanalogous/Breakout/blob/master/examples/three_js/accelerometer.html) for example applications.",
            "is_constructor": 1,
            "extends": "BO.PhysicalInputBase",
            "params": [
                {
                    "name": "board",
                    "description": "A reference to the IOBoard instance",
                    "type": "IOBoard"
                },
                {
                    "name": "xPin",
                    "description": "A reference to the Pin connected to the x axis of the\naccelerometer",
                    "type": "Pin"
                },
                {
                    "name": "yPin",
                    "description": "A reference to the Pin connected to the y axis of the\naccelerometer",
                    "type": "Pin"
                },
                {
                    "name": "zPin",
                    "description": "A reference to the Pin connected to the z axis of the\naccelerometer",
                    "type": "Pin"
                },
                {
                    "name": "dynamicRange",
                    "description": "The range of the acceleromter in Gs\n(typically 2 or 3 for an \nanalog accelerometer). See the datasheet for the acceleromter to get\nthe exact value.",
                    "type": "Number"
                },
                {
                    "name": "enableSmoothing",
                    "description": "True to enable smoothing, false to\ndisable. Default is false.",
                    "type": "Boolean"
                }
            ]
        },
        "BO.io.BiColorLED": {
            "name": "BO.io.BiColorLED",
            "shortname": "BiColorLED",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/BiColorLED.js",
            "line": 18,
            "description": "Creates an interface to an bi-color LED. This interface\nis for the type of bi-color LED with 3 legs. One leg is connected\nto power or ground (depending on the type of LED - common anode\nor common cathode) and the other 2 legs are connected to PWM pins\non the I/O board.\nSee [Breakout/examples/schematics.pdf](http://breakoutjs.com/examples/schematics.pdf)\nfor wiring diagrams.\nSee [Breakout/examples/actuators/bi\\_color\\_led.html](https://github.com/soundanalogous/Breakout/blob/master/examples/actuators/bi_color_led.html)\nfor an example application.\n\n<p>`COMMON_ANODE` vs `COMMON_CATHODE`. You can determine if your\nLED is common anode or common cathode by reading the datasheet. \nTo wire a common cathode LED, connect the cathode to ground\nand the 2 anode pins to the IOBoard PWM pins via resistors. For\na common anode LED, the anode is connected to power and the 2 \ncathode pins are connected to the IOBoard PWM pins via two \nresistors.</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "board",
                    "description": "A reference to the IOBoard instance that\nthe LED is attached to.",
                    "type": "IOBoard"
                },
                {
                    "name": "color1LEDPin",
                    "description": "A reference to the IOBoard Pin the\nfirst color LED pin is connected to.",
                    "type": "Pin"
                },
                {
                    "name": "color2LEDPin",
                    "description": "A reference to the IOBoard Pin the\nsecond color LED pin is connected to.",
                    "type": "Pin"
                },
                {
                    "name": "driveMode",
                    "description": "The drive mode of the LED. Must be\nset to `BiColorLED.COMMON_ANODE` or `BiColorLED.COMMON_CATHODE`.\n`BiColorLED.COMMON_ANODE` is default.",
                    "type": "Number"
                }
            ]
        },
        "BO.io.BlinkM": {
            "name": "BO.io.BlinkM",
            "shortname": "BlinkM",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/BlinkM.js",
            "line": 21,
            "description": "Creates an interface to a BlinkM RGB Led module. This\nobject allows you to change the color of the led, fade between\ncolors and run preprogrammed light scripts.\nSee [Breakout/examples/actuators/blinkM.html](https://github.com/soundanalogous/Breakout/blob/master/examples/actuators/blinkM.html) for an example application.",
            "is_constructor": 1,
            "extends": "BO.I2CBase",
            "params": [
                {
                    "name": "board",
                    "description": "The IOBoard instance",
                    "type": "IOBoard"
                },
                {
                    "name": "address",
                    "description": "The i2c address of the BlinkM module",
                    "type": "Number"
                }
            ]
        },
        "BO.io.Button": {
            "name": "BO.io.Button",
            "shortname": "Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/Button.js",
            "line": 18,
            "description": "Creates and interface to a physical button. The Button object\ndispatches events on state changes such as Pressed, Released and \nSustained Press. The Button object also handles debouncing.\n\nThe advantage of using the Button class over listening for pin change\nevents on a Pin object, is that the Button class handles debouncing and\nprovides helpful button events: Pressed, Released, Long Press and\nSustained Press\n\n<p>`PULL_UP` vs `PULL_DOWN`. If the other end of the resistor connected to\nthe button is connected to ground, configuration is `PULL_DOWN`, if the \nresistor is connected to power, then the configuration is `PULL_UP`.</p>",
            "is_constructor": 1,
            "extends": "BO.PhysicalInputBase",
            "params": [
                {
                    "name": "board",
                    "description": "A reference to the IOBoard instance",
                    "type": "IOBoard"
                },
                {
                    "name": "pin",
                    "description": "A reference to the Pin the button is connected to.",
                    "type": "Pin"
                },
                {
                    "name": "buttonMode",
                    "description": "The mode of the button (either \n`Button.PULL_DOWN` or `Button.PULL_UP` if wired with external resistors or \n`Button.INTERNAL_PULL_UP` if using the internal pull-up resistors. Default\nis `PULL_DOWN`.",
                    "type": "Number"
                },
                {
                    "name": "sustainedPressInterval",
                    "description": "The delay time in milliseconds \nbefore a sustained press event is fired.",
                    "type": "Number"
                }
            ]
        },
        "BO.io.ButtonEvent": {
            "name": "BO.io.ButtonEvent",
            "shortname": "ButtonEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/ButtonEvent.js",
            "line": 15,
            "description": "An Event object to be dispatched (fired) by a Button\nobject.",
            "is_constructor": 1,
            "extends": "JSUTILS.Event",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                }
            ]
        },
        "BO.io.CompassEvent": {
            "name": "BO.io.CompassEvent",
            "shortname": "CompassEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/CompassEvent.js",
            "line": 15,
            "description": "An Event object to be dispatched (fired) by a Compass object.",
            "is_constructor": 1,
            "extends": "JSUTILS.Event",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                }
            ]
        },
        "BO.io.CompassHMC6352": {
            "name": "BO.io.CompassHMC6352",
            "shortname": "CompassHMC6352",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/CompassHMC6352.js",
            "line": 16,
            "description": "Creates an interface to an HMC6352 Digital Compass module.\nUse the compass to obtain a heading. You must hold the sensor flat\nto obtain the most accurate heading value (just like an analog compass).\nThe compass is also useful in obtaining a rotation value in relation\nto a fixed position. See [Breakout/examples/sensors/hmc6352.html](https://github.com/soundanalogous/Breakout/blob/master/examples/sensors/hmc6352.html) and\n[Breakout/examples/processing\\_js/compass.html](https://github.com/soundanalogous/Breakout/blob/master/examples/processing_js/compass.html) for example applications.",
            "is_constructor": 1,
            "extends": "BO.I2CBase",
            "params": [
                {
                    "name": "board",
                    "description": "The IOBoard instance",
                    "type": "IOBoard"
                },
                {
                    "name": "address",
                    "description": "The i2c address of the compass module",
                    "type": "Number"
                }
            ]
        },
        "BO.io.DCMotor": {
            "name": "BO.io.DCMotor",
            "shortname": "DCMotor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/DCMotor.js",
            "line": 21,
            "description": "Creates an interface to an H-bridge to control the direction of rotation\nof a motor shaft. You can rotate forward (clockwise), reverse or apply a\nbrake. See [Breakout/examples/actuators/dcmotor.html](https://github.com/soundanalogous/Breakout/blob/master/examples/actuators/dcmotor.html) for an example\napplication.\n\n<p>Tested successfully with the following H-bridge: SN754410<br>\nShould also be compatible with the following:<br>\nSN754410<br>\nL293NE<br>\nTA7291P<br>\nTB6612FNG<br>\nBD621F</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "board",
                    "description": "A reference to the IOBoard instance that the\nservo is attached to.",
                    "type": "IOBoard"
                },
                {
                    "name": "forwardPin",
                    "description": "A reference to the Pin connected to the forward\ncontrol of the H-bridge.",
                    "type": "Pin"
                },
                {
                    "name": "reversePin",
                    "description": "A reference to the Pin connected to the reverse\ncontrol of the H-bridge.",
                    "type": "Pin"
                },
                {
                    "name": "pwmPin",
                    "description": "A reference to the Pin connected to the pwm control\nof the H-bridge.",
                    "type": "Pin"
                },
                {
                    "name": "minVoltage",
                    "description": "The minimum voltage (default = 1).",
                    "type": "Number"
                },
                {
                    "name": "maxVoltage",
                    "description": "The maximum voltage (default = 9).",
                    "type": "Number"
                },
                {
                    "name": "supplyVoltage",
                    "description": "The supply voltage (default = 9).",
                    "type": "Number"
                }
            ]
        },
        "BO.io.GyroEvent": {
            "name": "BO.io.GyroEvent",
            "shortname": "GyroEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/GyroEvent.js",
            "line": 15,
            "description": "An Event object to be dispatched (fired) by a Gyroscope\nobject.",
            "is_constructor": 1,
            "extends": "JSUTILS.Event",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                }
            ]
        },
        "BO.io.GyroITG3200": {
            "name": "BO.io.GyroITG3200",
            "shortname": "GyroITG3200",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/GyroITG3200.js",
            "line": 31,
            "description": "Creates an interface to an ITG3200 3-axis gyroscope. This gyro measures\nangular acceleration around the x, y, and z axis. This object provides\nthe angular velocity of each axis. Proper calibration is required for an\naccurate reading. See [Breakout/examples/sensors/itg3200.html](https://github.com/soundanalogous/Breakout/blob/master/examples/sensors/itg3200.html) and \n[Breakout/examples/processing\\_js/gyro.html](https://github.com/soundanalogous/Breakout/blob/master/examples/processing_js/gyro.html) for example applications.",
            "is_constructor": 1,
            "extends": "BO.I2CBase",
            "params": [
                {
                    "name": "board",
                    "description": "The IOBoard instance",
                    "type": "IOBoard"
                },
                {
                    "name": "autoStart",
                    "description": "True if read continuous mode should start automatically upon instantiation (default is true)",
                    "type": "Boolean"
                },
                {
                    "name": "address",
                    "description": "The i2c address of the accelerometer. If pin 9 (AD0) of the module is tied to VDD, then use\n`GyroITG3200.ID_AD0_DVV` (0x69), if pin 9 (AD0) is tied to GND, then use `GyroITG3200.ID_AD0_GND`. \nDefault = `GyroITG3200.ID_AD0_VDD`",
                    "type": "Number"
                }
            ]
        },
        "BO.io.LED": {
            "name": "BO.io.LED",
            "shortname": "LED",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/LED.js",
            "line": 22,
            "description": "Creates an interface to an LED. This object provides helpful\nmethods for blinking and fading LEDs. To use the fading methods, the\nLED must be connected to a PWM pin on the I/O board.\n\n<p>PLEASE NOTE: To use the fade methods, or to use an waveform other \nthan `Oscillator.SQUARE` the LED must be connected to a PWM pin.</p>\n\n<p>`SOURCE_DRIVE` vs `SYNC_DRIVE`. If the Anode (longer LED pin) is\nconnected to the microcontroller pin, then it is `SOURCE_DRIVE`. If the\nCathode is connected to the microcontroller pin, then it is \n`SYNC_DRIVE`.</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "board",
                    "description": "A reference to the IOBoard the LED is attached to.",
                    "type": "IOBoard"
                },
                {
                    "name": "ledPin",
                    "description": "A reference to the Pin the LED is connected to.",
                    "type": "Pin"
                },
                {
                    "name": "driveMode",
                    "description": "The drive mode of the LED. Must be set to\n`LED.SOURCE_MODE` or `LED.SYNC_MODE`. `SOURCE_MODE` is default.",
                    "type": "Number"
                }
            ]
        },
        "BO.io.MagnetometerHMC5883": {
            "name": "BO.io.MagnetometerHMC5883",
            "shortname": "MagnetometerHMC5883",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 26,
            "description": "Creates an interface to an HMC5883 3-axis magnetometer. Use the\nmagnetometer to obtain a compass heading or rotation in relation to\na fixed point. See [Breakout/examples/sensors/hmc5883.html](https://github.com/soundanalogous/Breakout/blob/master/examples/sensors/hmc5883.html) for an example\napplication.",
            "is_constructor": 1,
            "extends": "BO.I2CBase",
            "params": [
                {
                    "name": "board",
                    "description": "The IOBoard instance",
                    "type": "IOBoard"
                },
                {
                    "name": "address",
                    "description": "The i2c address of the compass module",
                    "type": "Number"
                },
                {
                    "name": "numSamples",
                    "description": "The number of samples averaged per \nmeasurement output. Options are: `MagnetometerHMC5883.SAMPLES_1`,\n`MagnetometerHMC5883.SAMPLES_2`, `MagnetometerHMC5883.SAMPLES_4`\n`MagnetometerHMC5883.SAMPLES_8` (default = `MagnetometerHMC5883.SAMPLES_1`)",
                    "type": "Number"
                },
                {
                    "name": "outputRate",
                    "description": "The data output rate in Hz \n(default = `MagnetometerHMC5883.HZ_30`)",
                    "type": "Number"
                }
            ]
        },
        "BO.io.MagnetometerEvent": {
            "name": "BO.io.MagnetometerEvent",
            "shortname": "MagnetometerEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/MagnetometerEvent.js",
            "line": 15,
            "description": "An Event object to be dispatched (fired) by a Magnetometer\nobject.",
            "is_constructor": 1,
            "extends": "JSUTILS.Event",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                }
            ]
        },
        "BO.io.PotEvent": {
            "name": "BO.io.PotEvent",
            "shortname": "PotEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/PotEvent.js",
            "line": 15,
            "description": "An Event object to be dispatched (fired) by a Potentiometer\nobject.",
            "is_constructor": 1,
            "extends": "JSUTILS.Event",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                }
            ]
        },
        "BO.io.Potentiometer": {
            "name": "BO.io.Potentiometer",
            "shortname": "Potentiometer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/Potentiometer.js",
            "line": 20,
            "description": "Creates an interface to an analog input sensor. This may be a\npotentiometer (dial) or any other analog input that is connected to a\nsingle analog pin.",
            "is_constructor": 1,
            "extends": "BO.PhysicalInputBase",
            "params": [
                {
                    "name": "board",
                    "description": "A reference to the IOBoard instance that the\nservo is attached to.",
                    "type": "IOBoard"
                },
                {
                    "name": "pin",
                    "description": "A reference to the Pin the potentiometer is connected\nto.",
                    "type": "Pin"
                },
                {
                    "name": "enableSmoothing",
                    "description": "True to enable smoothing, false to\ndisable. Default is false.",
                    "type": "Boolean"
                }
            ]
        },
        "BO.io.RGBLED": {
            "name": "BO.io.RGBLED",
            "shortname": "RGBLED",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/RGBLED.js",
            "line": 22,
            "description": "Creates an interface to an RGB LED. This interface is for the\ntype of RGB LED with 4 legs. One leg is connected to power or ground \n(depending on the type of LED - common anode or common cathode) and the\nother 3 legs are connected to PWM pins on the I/O board. See \n[Breakout/examples/schematics.pdf](http://breakoutjs.com/examples/schematics.pdf) for wiring diagrams. See \n[Breakout/examples/actuators/rgb\\_led.html](https://github.com/soundanalogous/Breakout/blob/master/examples/actuators/rgb_led.html) for an example application.\n\n<p>The RGB pins of the RGB LED must be connected to PWM pins on the\nIOBoard.</p>\n\n<p>`COMMON_ANODE` vs `COMMON_CATHODE`. You can determine if your RGB LED is \ncommon anode or common cathode by reading the datasheet. To wire a \ncommon cathode RGB LED, connect the cathode to ground and the 3 anode\npins to the IOBoard PWM pins via 330 ohm resistors. For a common anode\nLED, the anode is connected to power and the 3 cathode pins are connected\nto the IOBoard PWM pins via 330 ohm resistors.</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "board",
                    "description": "A reference to the IOBoard instance that the\nservo is attached to.",
                    "type": "IOBoard"
                },
                {
                    "name": "redLEDPin",
                    "description": "A reference to the IOBoard Pin the red LED pin\nis connected to.",
                    "type": "Pin"
                },
                {
                    "name": "greenLEDPin",
                    "description": "A reference to the IOBoard Pin the green LED\npin is connected to.",
                    "type": "Pin"
                },
                {
                    "name": "blueLEDPin",
                    "description": "A reference to the IOBoard Pin the blue LED pin\nis connected to.",
                    "type": "Pin"
                },
                {
                    "name": "driveMode",
                    "description": "The drive mode of the RGBLED. Must be set to\nRGBLED.COMMON_ANODE or RGBLED.COMMON_CATHODE. RGBLED.COMMON_ANODE is\ndefault.",
                    "type": "Number"
                }
            ]
        },
        "BO.io.Servo": {
            "name": "BO.io.Servo",
            "shortname": "Servo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/Servo.js",
            "line": 21,
            "description": "Creates an interface to a Servo motor. Use this object to set\nthe angle of the servo head. You can simply specify and angle between\n0 and 180 degrees and the servo head will rotate to that angle. See\n[Breakout/examples/actuators/servo.html](https://github.com/soundanalogous/Breakout/blob/master/examples/actuators/servo.html) for an example application.\nYou can also use this with a continuous rotation servo. See the\ndescription for the angle property for use with a continuous rotation\nservo.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "board",
                    "description": "A reference to the IOBoard instance that the \nservo is attached to.",
                    "type": "IOBoard"
                },
                {
                    "name": "servoPin",
                    "description": "A reference to the Pin the servo is connected to.",
                    "type": "Pin"
                },
                {
                    "name": "minAngle",
                    "description": "The minimum angle the server can rotate to\n(default = 0).",
                    "type": "Number"
                },
                {
                    "name": "maxAngle",
                    "description": "The maximum angle the server can rotate to\n(default = 180).",
                    "type": "Number"
                }
            ]
        },
        "BO.io.SoftPot": {
            "name": "BO.io.SoftPot",
            "shortname": "SoftPot",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/SoftPot.js",
            "line": 28,
            "description": "Creates an interface to a SoftPot sensor. A softpot is a type of\nanalog resistive sensor that acts as a type of slider input. There are \nstraight and curved variations. This object provides a number of useful \nevents such as Press, Release, Drag, Tap and capturing Flick gestures.\nSee [Breakout/examples/sensors/softpot.html](https://github.com/soundanalogous/Breakout/blob/master/examples/sensors/softpot.html) for an example application.",
            "is_constructor": 1,
            "extends": "BO.PhysicalInputBase",
            "params": [
                {
                    "name": "board",
                    "description": "A reference to the IOBoard instance",
                    "type": "IOBoard"
                },
                {
                    "name": "pin",
                    "description": "A reference to the Pin the softpot is connected to.",
                    "type": "Pin"
                },
                {
                    "name": "softPotLength",
                    "description": "The length of the softpot in mm. \nDefault = 100.",
                    "type": "Number"
                }
            ]
        },
        "BO.io.SoftPotEvent": {
            "name": "BO.io.SoftPotEvent",
            "shortname": "SoftPotEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/SoftPotEvent.js",
            "line": 15,
            "description": "An Event object to be dispatched (fired) by a SoftPot",
            "exports": "An Event object to be dispatched (fired) by a SoftPot\nobject.",
            "is_constructor": 1,
            "extends": "JSUTILS.Event",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "touchPoint",
                    "description": "The value where the softpot was touched",
                    "type": "Number"
                }
            ]
        },
        "BO.io.Stepper": {
            "name": "BO.io.Stepper",
            "shortname": "Stepper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "BO.io",
            "file": "src/io/Stepper.js",
            "line": 27,
            "description": "Creates an interface to a Stepper motor. Use this object to set\nthe direction and number of steps for the motor to rotate. See\n[Breakout/examples/actuators/stepper\\_2wire.html](https://github.com/soundanalogous/Breakout/blob/master/examples/actuators/stepper_2wire.html), \n[stepper\\_4wire.html](https://github.com/soundanalogous/Breakout/blob/master/examples/actuators/stepper_4wire.html), \n[stepper\\_easydriver.html](https://github.com/soundanalogous/Breakout/blob/master/examples/actuators/stepper_easydriver.html) \nand [stepper\\_simple.html](https://github.com/soundanalogous/Breakout/blob/master/examples/actuators/stepper_simple.html) for example applications.",
            "is_constructor": 1,
            "uses": [
                "JSUTILS.EventDispatcher"
            ],
            "params": [
                {
                    "name": "board",
                    "description": "A reference to the IOBoard instance that the \nstepper is attached to.",
                    "type": "IOBoard"
                },
                {
                    "name": "driverType.",
                    "description": "The type of driver (`Stepper.DRIVER`, \n`Stepper.TWO_WIRE`, or `Stepper.FOUR_WIRE`).",
                    "type": "Number"
                },
                {
                    "name": "numStepsPerRev",
                    "description": "The number of steps to make 1 revolution.",
                    "type": "Number"
                },
                {
                    "name": "directionPin",
                    "description": "If dirver interface, the pin used to control \nthe direction.\nIf 2-wire or 4-wire interface, the 1st moter pin.",
                    "type": "Pin"
                },
                {
                    "name": "stepPin",
                    "description": "If dirver interface, the pin used to control the \nsteps.\nIf 2-wire or 4-wire interface, the 2nd moter pin.",
                    "type": "Pin"
                },
                {
                    "name": "motorPin3",
                    "description": "[optional] Only required for a 4-wire interface.",
                    "type": "Pin"
                },
                {
                    "name": "motorPin4",
                    "description": "[optional] Only required for a 4-wire interface.",
                    "type": "Pin"
                }
            ],
            "example": [
                "\n    var Stepper = BO.io.Stepper,\n        Event = JSUTILS.Event;\n\n    var stepper,\n        stepsPerRev = 200,           // update this for your stepper\n        numSteps = stepsPerRev * 10, // 10 revolutions (+ CW, - CCW)\n        speed = 15.0,                // rad/sec (RPM = speed * 9.55)\n        acceleration = 20.0,         // rad/sec^2\n        deceleration = 20.0;         // rad/sec^2\n\n    stepper = new Stepper(arduino,\n                 Stepper.TWO_WIRE, // or Stepper.DRIVER or Stepper.FOUR_WIRE\n                 stepsPerRev,\n                 arduino.getDigitalPin(2),\n                 arduino.getDigitalPin(3));\n\n    stepper.addEventListener(Event.COMPLETE, onStepperComplete);\n\n    // acceleration and deceleration parameters are optional\n    stepper.step(numSteps, speed, acceleration, deceleration);\n\n    function onStepperComplete(event) {\n        // each stepper is assigned a read-only id value when instantiated\n        console.log(\"stepper \" + event.target.id + \" sequence complete\");\n    }"
            ]
        },
        "JSUTILS.Event": {
            "name": "JSUTILS.Event",
            "shortname": "Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "JSUTILS",
            "file": "src/utils/Event.js",
            "line": 15,
            "description": "A base class for the creation of Event objects.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "event type",
                    "type": "String"
                }
            ]
        },
        "JSUTILS.EventDispatcher": {
            "name": "JSUTILS.EventDispatcher",
            "shortname": "EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "BO.I2CBase",
                "BO.IOBoard",
                "BO.PhysicalInputBase",
                "BO.Pin",
                "BO.WSocketWrapper",
                "BO.custom.ID12RFIDReader",
                "BO.io.Stepper"
            ],
            "namespace": "JSUTILS",
            "file": "src/utils/EventDispatcher.js",
            "line": 12,
            "description": "The EventDispatcher class mimics the DOM event dispatcher model so the \nuser can add and remove event listeners in a familiar way. Event bubbling\nis not available because events are dispatched in relation to state \nchanges of physical components instead of layered graphics so there is \nnothing to bubble up.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The instance of the class that implements\nEventDispatcher",
                    "type": "Class"
                }
            ]
        },
        "JSUTILS.SignalScope": {
            "name": "JSUTILS.SignalScope",
            "shortname": "SignalScope",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "JSUTILS",
            "file": "src/utils/SignalScope.js",
            "line": 17,
            "description": "A simple 2 channel scope to view analog input data.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvasId",
                    "description": "The id of the canvas element to \nuse to draw the signal.",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "The width of the canvas element.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the canvas element.",
                    "type": "Number"
                },
                {
                    "name": "rangeMin",
                    "description": "The minimum range of the scope.",
                    "type": "Number"
                },
                {
                    "name": "rangeMax",
                    "description": "The maximum range of the scope.",
                    "type": "Number"
                },
                {
                    "name": "ch1Color",
                    "description": "[optional] The hex color value to use\nfor the channel 1 signal (default = #FF0000).",
                    "type": "String"
                },
                {
                    "name": "ch2Color",
                    "description": "[optional] The hex colorvalue to use\nfor the channel 2 signal (default = #0000FF).",
                    "type": "String"
                }
            ]
        },
        "JSUTILS.Timer": {
            "name": "JSUTILS.Timer",
            "shortname": "Timer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "JSUTILS",
            "file": "src/utils/Timer.js",
            "line": 16,
            "description": "The Timer object wraps the window.setInterval() method to provide\nan as3-like Timer interface.",
            "is_constructor": 1,
            "extends": "JSUTILS.EventDispatcher",
            "params": [
                {
                    "name": "delay",
                    "description": "The delay (ms) interval between ticks",
                    "type": "Number"
                },
                {
                    "name": "repeatCount",
                    "description": "The number of number of ticks.\nA value of zero will set the timer to repeat forever. Default = 0",
                    "type": "Number"
                }
            ]
        },
        "JSUTILS.TimerEvent": {
            "name": "JSUTILS.TimerEvent",
            "shortname": "TimerEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "JSUTILS",
            "file": "src/utils/TimerEvent.js",
            "line": 15,
            "description": "An Event object to be dispatched (fired) by a Timer object.",
            "is_constructor": 1,
            "extends": "JSUTILS.Event",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "src/core/I2CBase.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.I2CBase"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 8,
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 40,
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 47,
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 76,
            "description": "[read-only] The address of the i2c device.",
            "itemtype": "property",
            "name": "address",
            "type": "Number",
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 86,
            "access": "private",
            "tagname": "onSysExMessage",
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 116,
            "description": "Send an i2c request command to the board",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "sendI2CRequest",
            "params": [
                {
                    "name": "command",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Number[]"
                }
            ],
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 142,
            "description": "To be implemented in subclass",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "update",
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 151,
            "description": "To be implemented in subclass. Data should be: slave address,\nregister, data0, data1...",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "handleI2C",
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 164,
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to be called when the event is fired",
                    "type": "Function"
                }
            ],
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 172,
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to be called when the event is fired",
                    "type": "Function"
                }
            ],
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 180,
            "params": [
                {
                    "name": "type",
                    "description": "The event type\nreturn {boolean} True is listener exists for this type, false if not.",
                    "type": "String"
                }
            ],
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 188,
            "params": [
                {
                    "name": "type",
                    "description": "The Event object",
                    "type": "Event"
                },
                {
                    "name": "optionalParams",
                    "description": "Optional parameters to assign to the event object.\nreturn {boolean} True if dispatch is successful, false if not.",
                    "type": "Object"
                }
            ],
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 199,
            "itemtype": "property",
            "name": "I2CBase.I2C_REQUEST",
            "static": 1,
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 204,
            "itemtype": "property",
            "name": "I2CBase.I2C_REPLY",
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 208,
            "itemtype": "property",
            "name": "I2CBase.I2C_CONFIG",
            "static": 1,
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 214,
            "itemtype": "property",
            "name": "I2CBase.WRITE",
            "static": 1,
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 219,
            "itemtype": "property",
            "name": "I2CBase.READ",
            "static": 1,
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 224,
            "itemtype": "property",
            "name": "I2CBase.READ_CONTINUOUS",
            "static": 1,
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/I2CBase.js",
            "line": 229,
            "itemtype": "property",
            "name": "I2CBase.STOP_READING",
            "static": 1,
            "class": "BO.I2CBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1,
            "description": "Copyright (c) 2011-2013 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 122,
            "description": "A websocket connection has been established.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onSocketConnection",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 133,
            "description": "A websocket message has been received.",
            "params": [
                {
                    "name": "event",
                    "description": "The message property is an array of one or\nmore stringified bytes from the board or a config string from\nthe server.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onSocketMessage",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 158,
            "description": "Determine if the incoming data is a config message or a byte.",
            "params": [
                {
                    "name": "data",
                    "description": "A string representing a config message or\nan 8-bit unsigned integer.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "parseInputMessage",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 181,
            "description": "Report that the websocket connection has been closed.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onSocketClosed",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 191,
            "description": "Request the firmware version from the IOBoard.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "begin",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 201,
            "description": "On startup, Firmata reports its version. Make sure the version is\n2.3 or greater before proceeding. If the Firmata version is < 2.3\nreport this to the user (to do: throw appropriate error?).",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onInitialVersionResult",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 242,
            "description": "Check if a capability response was received. If not, assume that\na custom sketch was loaded to the IOBoard and fire a READY event.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "checkForQueryResponse",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 265,
            "description": "Process a status message from the websocket server",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "processStatusMessage",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 277,
            "description": "Process input data from the IOBoard.",
            "params": [
                {
                    "name": "inputData",
                    "description": "Number as an 8-bit unsigned integer",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "processInput",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 310,
            "description": "Incoming data is either multibyte or sysex. Route multibyte\ndata to the appropriate method.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "processMultiByteCommand",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 340,
            "description": "Processing inmcoming digital data. Parse the port number and value\nto determine if any digital input data has changed. Dispatch an\nevent if the value has changed.",
            "params": [
                {
                    "name": "port",
                    "description": "Digital data is sent per port. This does not\nalign with the concept of a microcontroller port, but is a\ncollection of 8 pins on the microcontroller.",
                    "type": "Number"
                },
                {
                    "name": "bits0_6",
                    "description": "Bits 0 - 6 of the port value.",
                    "type": "Number"
                },
                {
                    "name": "bits7_13",
                    "description": "Bits 7 - 13 of the port value.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "processDigitalMessage",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 384,
            "description": "Process incoming analog data. The value is mapped from 0 - 1023 to\na floating point value between 0.0 - 1.0.\n\nTO DO: add a maxADCValue property to Pin or IOBoard to support\nADC values > 1023. maxADCValue could be set during the \nconfiguration routine if it's supported by Firmata in the future.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "processAnalogMessage",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 415,
            "description": "Route the incoming sysex data to the appropriate method.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "processSysexCommand",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 450,
            "description": "Construct the firmware name and version from incoming ascii data.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "processQueryFirmwareResult",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 466,
            "description": "Construct a String from an incoming ascii data.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "processSysExString",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 484,
            "description": "Auto configure using capabilities response.\nThis creates a configuration for any board in the Firmata boards.h \nfile.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "processCapabilitiesResponse",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 571,
            "description": "Map map analog pins to board pin numbers. Need to do this because\nthe capability query does not provide the correct order of analog\npins.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "processAnalogMappingResponse",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 601,
            "description": "Single client mode is the default mode.\nChecking the \"Enable multi-client\" box in the Breakout Server UI to\nenable multi-client mode.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "startupInMultiClientMode",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 621,
            "description": "The IOBoard is configured and ready to send and accept commands.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "startup",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 633,
            "description": "Resets the board to its default state without physically resetting\nthe board.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "systemReset",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 645,
            "description": "Reads the current configuration of the requested pin. The following\nvalues are returned: 1: pin number, 2: pin type (0: DIN, 1: DOUT, \n2: AIN, 3: AOUT / PWM, 4: SERVO, 5: SHIFT, 6: I2C), 3: pin state.\nThe pin state for output modes is the value previously written\nto the pin. For input modes (AIN, DIN, etc) the state is typically\nzero (it is not the value that was written to the pin). For digital\ninputs the state is the status of the pullup resistor.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "processPinStateResponse",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 695,
            "description": "Convert char to decimal value.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "toDec",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 707,
            "description": "Called when ever a pin value is set via pin.value = someValue.\nSends digital or analog output pin and output values to the IOBoard.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "sendOut",
            "params": [
                {
                    "name": "event",
                    "description": "A reference to the event object (Pin in this\ncase).",
                    "type": "Event"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 734,
            "description": "Ensure that event listeners are properly managed for pin objects \nas the pin type is changed during the execution of the program.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "managePinListener",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 758,
            "description": "Sends an analog value up to 14 bits on an analog pin number between\n0 and 15. The value passed to this method should be in the range of\n0.0 to 1.0. It is multiplied by the maxPWMValue set for the pin.",
            "params": [
                {
                    "name": "pin",
                    "description": "The analog pin number.\nparam {Number} value The value to send (0.0 to 1.0).",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "sendAnalogData",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 781,
            "description": "Sends an analog value > 14 bits and/or send a value for a pin number\ngreater than 15.",
            "params": [
                {
                    "name": "pin",
                    "description": "The analog pin number (up to 128).",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to send (up to 16 bits).",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "sendExtendedAnalogData",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 814,
            "description": "Add the pin value to the appropriate digital port and send the \nupdated digital port value.",
            "params": [
                {
                    "name": "pin",
                    "description": "The digital pin number.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value of the digital pin (0 or 1).",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "sendDigitalData",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 842,
            "description": "Send the servo angle.",
            "params": [
                {
                    "name": "pin",
                    "description": "The digital pin number the servo is attached to.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The angle to rotate to (0.0 to 1.0 mapped to 0 - 180).",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "sendServoData",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 856,
            "description": "Query the cababilities and current state any board running Firmata.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "queryCapabilities",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 866,
            "description": "Query which pins correspond to the analog channels",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "queryAnalogMapping",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 876,
            "description": "Call this method to enable or disable analog input for the specified\npin.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setAnalogPinReporting",
            "params": [
                {
                    "name": "pin",
                    "description": "The pin connected to the analog input",
                    "type": "Number"
                },
                {
                    "name": "mode",
                    "description": "Pin.ON to enable input or Pin.OFF to disable\ninput for the specified pin.",
                    "type": "Number"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 891,
            "description": "for debugging",
            "access": "private",
            "tagname": "",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 903,
            "description": "Get or set the sampling interval (how often to run the main loop on\nthe IOBoard). Normally the sampling interval should not be changed. \nDefault = 19 (ms).",
            "itemtype": "property",
            "name": "samplingInterval",
            "type": "Number",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 924,
            "description": "Set to true when the IOBoard is ready. This can be used in place of\nlistening for the IOBoardEvent.READY event when creating an app with\na draw loop (such as when using processing.js or three.js);",
            "itemtype": "property",
            "name": "isReady",
            "type": "Boolean",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 939,
            "description": "A utility class to assemble a single value from the 2 bytes returned\nfrom the IOBoard (since data is passed in 7 bit Bytes rather than \n8 bit it must be reassembled. This is to be used as a protected\nmethod and should not be needed in any application level code.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getValueFromTwo7bitBytes",
            "params": [
                {
                    "name": "lsb",
                    "description": "The least-significant byte of the 2 values to\nbe concatentated",
                    "type": "Number"
                },
                {
                    "name": "msb",
                    "description": "The most-significant byte of the 2 values to be\nconcatenated",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The result of merging the 2 bytes",
                "type": "Number"
            },
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 957,
            "itemtype": "method",
            "name": "getSocket",
            "return": {
                "description": "A reference to the WebSocket",
                "type": "WSocketWrapper"
            },
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 965,
            "description": "Request the Firmata version implemented in the firmware (sketch)\nrunning on the IOBoard.\nListen for the IOBoard.FIRMWARE_VERSION event to be notified of when \nthe Firmata version is returned from the IOBoard.",
            "itemtype": "method",
            "name": "reportVersion",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 976,
            "description": "Request the name of the firmware (the sketch) running on the IOBoard.\nListen for the IOBoard.FIRMWARE_NAME event to be notified of when \nthe name is returned from the IOBoard. The version number is also\nreturned.",
            "itemtype": "method",
            "name": "reportFirmware",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 987,
            "description": "Disables digital pin reporting for all digital pins.",
            "itemtype": "method",
            "name": "disableDigitalPins",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 997,
            "description": "Enables digital pin reporting for all digital pins. You must call\nthis before you can receive digital pin data from the IOBoard.",
            "itemtype": "method",
            "name": "enableDigitalPins",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1008,
            "description": "Enable or disable reporting of all digital pins for the specified\nport.",
            "itemtype": "method",
            "name": "sendDigitalPortReporting",
            "params": [
                {
                    "name": "mode",
                    "description": "Either Pin.On or Pin.OFF",
                    "type": "Number"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1018,
            "description": "Call this method to enable analog input for the specified pin.",
            "itemtype": "method",
            "name": "enableAnalogPin",
            "params": [
                {
                    "name": "pin",
                    "description": "The pin connected to the analog input",
                    "type": "Number"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1027,
            "description": "Call this method to disable analog input for the specified pin.",
            "itemtype": "method",
            "name": "disableAnalogPin",
            "params": [
                {
                    "name": "pin",
                    "description": "The pin connected to the analog input",
                    "type": "Number"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1036,
            "description": "Set the specified digital pin mode.",
            "itemtype": "method",
            "name": "setDigitalPinMode",
            "params": [
                {
                    "name": "pin",
                    "description": "The number of the pin. When using and analog\npin as a digital pin, refer the datasheet for your board to obtain \nthe digital pin equivalent of the analog pin number. For example on \nan Arduino UNO, analog pin 0 = digital pin 14.",
                    "type": "Number"
                },
                {
                    "name": "mode",
                    "description": "Pin.DIN, Pin.DOUT, Pin.PWM, Pin.SERVO,\nPin.SHIFT, or Pin.I2c",
                    "type": "Number"
                },
                {
                    "name": "silent",
                    "description": "[optional] Set to true to not send\nSET_PIN_MODE command. Default = false.",
                    "type": "Boolean"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1060,
            "description": "Enable the internal pull-up resistor for the specified pin number.",
            "itemtype": "method",
            "name": "enablePullUp",
            "params": [
                {
                    "name": "pinNum",
                    "description": "The number of the input pin to enable the\npull-up resistor.",
                    "type": "Number"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1070,
            "itemtype": "method",
            "name": "getFirmwareName",
            "return": {
                "description": "The name of the firmware running on the IOBoard.",
                "type": "String"
            },
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1080,
            "itemtype": "method",
            "name": "getFirmwareVersion",
            "return": {
                "description": "The version of the firmware running on the\nIOBoard.",
                "type": "String"
            },
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1089,
            "description": "Returns the capabilities for each pin on the IOBoard. The array is\nindexed by pin number (beginning at pin 0). Each array element\ncontains an object with a property for each modes (input, output, \npwm, servo, i2c, etc) supported by the pin. The mode value is the\nresolution in bits.",
            "itemtype": "method",
            "name": "getPinCapabilities",
            "return": {
                "description": "The capabilities of the Pins on the IOBoard.",
                "type": "Array"
            },
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1144,
            "description": "Reads the current state of the requested pin. Listen for the\nIOBoardEvent.PIN_STATE_RESPONSE event to get the response.\nThe response contains a reference to the pin object with its\nstate updated to match the current state of the pin on the IOBoard.\n\nYou should not typically need to call this method since the pin\nstates are maintained client-side. Use the getAnalogPin or \ngetDigitalPin to get the current state of a pin or getPins to\nget an array of all Pin objects for the IOBoard.\n\nCases for queryPinState are to update the pin state after a period\nof inactivity. For example if multiple client applications are\nusing the same IOBoard (so multiple JavaScript apps connected to\nthe same Arduino). When a new client connection is made, \nqueryPinState is called automatically to copy the IOBoard pin state\nto the client. If for some reason you needed to copy the state of a\nsingle or multiple Pins again, you could call queryPinState in your\napplication. In most cases however you should never need to call \nthis method.",
            "itemtype": "method",
            "name": "queryPinState",
            "params": [
                {
                    "name": "pin",
                    "description": "The pin object to query the pin state for.",
                    "type": "Pin"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1175,
            "description": "Send the digital values for a port. Making this private for now.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "sendDigitalPort",
            "params": [
                {
                    "name": "portNumber",
                    "description": "The number of the port",
                    "type": "Number"
                },
                {
                    "name": "portData",
                    "description": "A byte representing the state of the 8 pins\nfor the specified port",
                    "type": "Number"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1188,
            "description": "Send a string message to the IOBoard. This is useful if you have a\ncustom sketch running on the IOBoard rather than StandardFirmata\nand want to communicate with your javascript message via string\nmessages that you then parse in javascript.\nYou can receive string messages as well.\n\n<p>To test, load the EchoString.pde example from Firmata->Examples\nmenu in the IOBoard Application, then use sendString(\"your string\nmessage\") to have it echoed back to your javascript application.</p>",
            "itemtype": "method",
            "name": "sendString",
            "params": [
                {
                    "name": "str",
                    "description": "The string message to send to the IOBoard",
                    "type": "String"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1215,
            "description": "Send a sysEx message to the IOBoard. This is useful for sending\ncustom sysEx data to the IOBoard, for example if you are not using\nStandardFirmata. You would likely use it in a class rather than \ncalling it from your main application.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "sendSysex",
            "params": [
                {
                    "name": "command",
                    "description": "The sysEx command value (see firmata.org)",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "A packet of data representing the sysEx\nmessage to be sent",
                    "type": "Number[]"
                }
            ],
            "see": [
                "<a href=\"http://firmata.org/wiki/Protocol#Sysex_Message_Format\">Firmata Sysex Message Format\"</a>"
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1247,
            "description": "Call to associate a pin with a connected servo motor. See the\ndocumentation for your servo motor for the minimum and maximum \npulse width. If you can't find it, then the default values should\nbe close enough so call sendServoAttach(pin) omitting the min and\nmax values.",
            "itemtype": "method",
            "name": "sendServoAttach",
            "params": [
                {
                    "name": "pin",
                    "description": "The pin the server is connected to.",
                    "type": "Number"
                },
                {
                    "name": "minPulse",
                    "description": "[optional] The minimum pulse width for the\nservo. Default = 544.",
                    "type": "Number"
                },
                {
                    "name": "maxPulse",
                    "description": "[optional] The maximum pulse width for the\nservo. Default = 2400.",
                    "type": "Number"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1284,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getPin",
            "return": {
                "description": "An unmapped reference to the Pin object.",
                "type": "Pin"
            },
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1293,
            "itemtype": "method",
            "name": "getAnalogPin",
            "return": {
                "description": "A reference to the Pin object (mapped to the IOBoard\nboard analog pin).",
                "type": "Pin"
            },
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1302,
            "itemtype": "method",
            "name": "getDigitalPin",
            "return": {
                "description": "A reference to the Pin object (mapped to the IOBoard\nboard digital pin).",
                "type": "Pin"
            },
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1311,
            "itemtype": "method",
            "name": "getPins",
            "return": {
                "description": "An array containing all pins on the IOBoard",
                "type": "Pin[]"
            },
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1319,
            "description": "Use this method to obtain the digital pin number equivalent \nfor an analog pin.",
            "example": [
                "\n    // set analog pin A3 on an Arduino Uno to digital input\n    board.setDigitalPinMode(board.analogToDigital(3), Pin.DIN);\n\n<p>board.analogToDigital(3) returns 17 which is the digital\nequivalent of the analog pin</p>"
            ],
            "itemtype": "method",
            "name": "analogToDigital",
            "return": {
                "description": "The digital pin number equivalent for the specified\nanalog pin number.",
                "type": "Number"
            },
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1338,
            "itemtype": "method",
            "name": "getPinCount",
            "return": {
                "description": "Total number of pins",
                "type": "Number"
            },
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1346,
            "itemtype": "method",
            "name": "getAnalogPinCount",
            "return": {
                "description": "The total number of analog pins supported by this\nIOBoard",
                "type": "Number"
            },
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1355,
            "description": "Returns undefined if the board does not have i2c pins.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getI2cPins",
            "return": {
                "description": "The pin numbers of the i2c pins if the board has\ni2c.",
                "type": "Number[]"
            },
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1366,
            "description": "Call this method to print the capabilities for all pins to \nthe console.",
            "itemtype": "method",
            "name": "reportCapabilities",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1387,
            "description": "A wrapper for the send method of the WebSocket\nI'm not sure there is a case for the user to call this method\nSo I'm making this private for now.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "message",
                    "description": "Message data to be sent to the IOBoard",
                    "type": "Number[]"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1400,
            "description": "A wrapper for the close method of the WebSocket. Making this \nprivate until a use case arises.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "close",
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1413,
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to be called when the event\nis fired",
                    "type": "Function"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1422,
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to be called when the event\nis fired",
                    "type": "Function"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1431,
            "params": [
                {
                    "name": "type",
                    "description": "The event type\nreturn {boolean} True is listener exists for this type, false if not.",
                    "type": "String"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1439,
            "params": [
                {
                    "name": "type",
                    "description": "The Event object",
                    "type": "Event"
                },
                {
                    "name": "optionalParams",
                    "description": "Optional parameters to assign to the\nevent object.\nreturn {boolean} True if dispatch is successful, false if not.",
                    "type": "Object"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1453,
            "description": "The ioBoardReady event is dispatched when the board is ready to\nsend and receive commands.",
            "type": "BO.IOBoardEvent.READY",
            "itemtype": "event",
            "name": "ioBoardReady",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the IOBoard",
                    "type": "IOBoard"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1461,
            "description": "The ioBoardConnected event is dispatched when the websocket \nconnection is established.",
            "type": "BO.IOBoardEvent.CONNECTED",
            "itemtype": "event",
            "name": "ioBoardConnected",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the IOBoard",
                    "type": "IOBoard"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1469,
            "description": "The ioBoardDisconnected event is dispatched when the websocket\nconnection is closed.",
            "type": "BO.IOBoardEvent.DISCONNECTED",
            "itemtype": "event",
            "name": "ioBoardDisconnected",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the IOBoard",
                    "type": "IOBoard"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1477,
            "description": "The stringMessage event is dispatched when a string is received\nfrom the IOBoard.",
            "type": "BO.IOBoardEvent.STRING_MESSAGE",
            "itemtype": "event",
            "name": "stringMessage",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the IOBoard",
                    "type": "IOBoard"
                },
                {
                    "name": "message",
                    "description": "The string message received from the IOBoard",
                    "type": "String"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1486,
            "description": "The sysexMessage event is dispatched when a sysEx message is \nreceived from the IOBoard.",
            "type": "BO.IOBoardEvent.SYSEX_MESSAGE",
            "itemtype": "event",
            "name": "sysexMessage",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the IOBoard",
                    "type": "IOBoard"
                },
                {
                    "name": "message",
                    "description": "The sysEx data",
                    "type": "Array"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1495,
            "description": "The firmwareVersion event is dispatched when the firmware version\nis received from the IOBoard.",
            "type": "BO.IOBoardEvent.FIRMWARE_VERSION",
            "itemtype": "event",
            "name": "firmwareVersion",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the IOBoard",
                    "type": "IOBoard"
                },
                {
                    "name": "version",
                    "description": "The firmware version (where Firmata 2.3 = 23)",
                    "type": "Number"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1504,
            "description": "The firmwareName event is dispatched when the firmware name is\nreceived from the IOBoard.",
            "type": "BO.IOBoardEvent.FIRMWARE_NAME",
            "itemtype": "event",
            "name": "firmwareName",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the IOBoard",
                    "type": "IOBoard"
                },
                {
                    "name": "name",
                    "description": "The name of the firmware running on the IOBoard",
                    "type": "String"
                },
                {
                    "name": "version",
                    "description": "The firmware version (where Firmata 2.3 = 23)",
                    "type": "Number"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1514,
            "description": "The pinStateResponse event is dispatched when the results of\na pin state query (via a call to: queryPinState()) is received.",
            "type": "BO.IOBoardEvent.PIN_STATE_RESPONSE",
            "itemtype": "event",
            "name": "pinStateResponse",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the IOBoard",
                    "type": "IOBoard"
                },
                {
                    "name": "pin",
                    "description": "A reference to the pin object.",
                    "type": "BO.Pin"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1523,
            "description": "The analogData event is dispatched when analog data is received\nfrom the IOBoard. Use thie event to be notified when any analog\npin value changes. Use Pin.CHANGE to be notified when a specific\npin value changes.",
            "type": "BO.IOBoardEvent.ANALOG_DATA",
            "itemtype": "event",
            "name": "analogData",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the IOBoard",
                    "type": "IOBoard"
                },
                {
                    "name": "pin",
                    "description": "A reference to the pin object.",
                    "type": "BO.Pin"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoard.js",
            "line": 1534,
            "description": "The digitalData event is dispatched when digital data is received\nfrom the IOBoard. Use this event to be notified when any digital\npin value changes. Use Pin.CHANGE to be notified when a specific\npin value changes.",
            "type": "BO.IOBoardEvent.DIGITAL_DATA",
            "itemtype": "event",
            "name": "digitalData",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the IOBoard",
                    "type": "IOBoard"
                },
                {
                    "name": "pin",
                    "description": "A reference to the pin object.",
                    "type": "BO.Pin"
                }
            ],
            "class": "BO.IOBoard",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoardEvent.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.IOBoardEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoardEvent.js",
            "line": 36,
            "itemtype": "property",
            "name": "IOBoardEvent.ANALOG_DATA",
            "static": 1,
            "class": "BO.IOBoardEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoardEvent.js",
            "line": 41,
            "itemtype": "property",
            "name": "IOBoardEvent.DIGITAL_DATA",
            "static": 1,
            "class": "BO.IOBoardEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoardEvent.js",
            "line": 46,
            "itemtype": "property",
            "name": "IOBoardEvent.FIRMWARE_VERSION",
            "static": 1,
            "class": "BO.IOBoardEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoardEvent.js",
            "line": 51,
            "itemtype": "property",
            "name": "IOBoardEvent.FIRMWARE_NAME",
            "static": 1,
            "class": "BO.IOBoardEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoardEvent.js",
            "line": 56,
            "itemtype": "property",
            "name": "IOBoardEvent.STRING_MESSAGE",
            "static": 1,
            "class": "BO.IOBoardEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoardEvent.js",
            "line": 61,
            "itemtype": "property",
            "name": "IOBoardEvent.SYSEX_MESSAGE",
            "static": 1,
            "class": "BO.IOBoardEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoardEvent.js",
            "line": 66,
            "itemtype": "property",
            "name": "IOBoardEvent.PIN_STATE_RESPONSE",
            "static": 1,
            "class": "BO.IOBoardEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoardEvent.js",
            "line": 71,
            "itemtype": "property",
            "name": "IOBoardEvent.READY",
            "static": 1,
            "class": "BO.IOBoardEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoardEvent.js",
            "line": 76,
            "itemtype": "property",
            "name": "IOBoardEvent.CONNECTED",
            "static": 1,
            "class": "BO.IOBoardEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/IOBoardEvent.js",
            "line": 81,
            "itemtype": "property",
            "name": "IOBoardEvent.DISCONNECTED",
            "static": 1,
            "class": "BO.IOBoardEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/PhysicalInputBase.js",
            "line": 1,
            "description": "Based on PhysicalInput.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.PhysicalInputBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/PhysicalInputBase.js",
            "line": 43,
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to be called when the event is fired",
                    "type": "Function"
                }
            ],
            "class": "BO.PhysicalInputBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/PhysicalInputBase.js",
            "line": 51,
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to be called when the event is fired",
                    "type": "Function"
                }
            ],
            "class": "BO.PhysicalInputBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/PhysicalInputBase.js",
            "line": 59,
            "params": [
                {
                    "name": "type",
                    "description": "The event type\nreturn {boolean} True is listener exists for this type, false if not.",
                    "type": "String"
                }
            ],
            "class": "BO.PhysicalInputBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/PhysicalInputBase.js",
            "line": 67,
            "params": [
                {
                    "name": "type",
                    "description": "The Event object",
                    "type": "Event"
                },
                {
                    "name": "optionalParams",
                    "description": "Optional parameters to assign to the event object.\nreturn {boolean} True if dispatch is successful, false if not.",
                    "type": "Object"
                }
            ],
            "class": "BO.PhysicalInputBase",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 1,
            "description": "Based on Pin.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 67,
            "description": "The analogNumber sould only be set internally.",
            "access": "private",
            "tagname": "",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 75,
            "description": "[read-only] The analog pin number used by the IOBoard (printed on \nboard or datasheet).",
            "itemtype": "property",
            "name": "analogNumber",
            "type": "Number",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 85,
            "description": "[read-only] The pin number corresponding to the Arduino documentation \nfor the type of board.",
            "itemtype": "property",
            "name": "number",
            "type": "Number",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 95,
            "description": "The maximum PWM value supported for this pin. This value should\nnormally be set internally.",
            "access": "private",
            "tagname": "",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 104,
            "description": "Sets the state value. This is populated by the \nprocessPinStateResponse method of the IOBoard object. It should not\nbe called manually.",
            "params": [
                {
                    "name": "state",
                    "description": "The state of the pin. For output modes, the\nstate is any value that has been previously written to the pin. For \ninput modes, the state is typically zero, however for digital inputs\nthe state is the status of the pullup resistor.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 124,
            "description": "[read-only] The maximum PWM value supported for this pin.\n<p> This is the max PWM value supported by Arduino (currently 255) \nrather than the max PWM value specified by the microcontroller \ndatasheet.</p>",
            "itemtype": "property",
            "name": "maxPWMValue",
            "type": "Number",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 137,
            "description": "[read-only] The average value of the pin over time. Call clear() to \nreset.",
            "itemtype": "property",
            "name": "average",
            "type": "Number",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 147,
            "description": "[read-only] The minimum value of the pin over time. Call clear() to \nreset.",
            "itemtype": "property",
            "name": "minimum",
            "type": "Number",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 157,
            "description": "[read-only] The maximum value of the pin over time. Call clear() to \nreset.",
            "itemtype": "property",
            "name": "maximum",
            "type": "Number",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 167,
            "description": "<p>[read-only] The state of the pin. For output modes, the state is \nany value that has been previously written to the pin. For input \nmodes, the state is typically zero, however for digital inputs the \nstate is the status of the pullup resistor.</p>\n\n<p>This propery is populated by calling the queryPinState method of \nthe IOBoard object. This is useful if there are multiple client \napplications connected to a single physical IOBoard and you want to \nget the state of a pin that is set by another client application.</p>",
            "itemtype": "property",
            "name": "state",
            "type": "Number",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 185,
            "description": "The current digital or analog value of the pin.",
            "itemtype": "property",
            "name": "value",
            "type": "Number",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 201,
            "description": "[read-only] The last pin value.",
            "itemtype": "property",
            "name": "lastValue",
            "type": "Number",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 210,
            "description": "[read-only] The value before any filters were applied.",
            "itemtype": "property",
            "name": "preFilterValue",
            "type": "Number",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 219,
            "description": "Get and set filters for the Pin.",
            "itemtype": "property",
            "name": "filters",
            "type": "FilterBase[]",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 231,
            "description": "[read-only] Get a reference to the current generator.",
            "itemtype": "property",
            "name": "generator",
            "type": "GeneratorBase",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 240,
            "description": "The type/mode of the pin (0: DIN, 1: DOUT, 2: AIN, 3: AOUT / PWM,\n4: SERVO, 5: SHIFT, 6: I2C). Use \nIOBoard.setDigitalPinMode(pinNumber) to set the pin type.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "The pin type/mode",
                "type": "Number"
            },
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 251,
            "description": "Set the pin type. This method should only be used internally.",
            "access": "private",
            "tagname": "",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 262,
            "description": "An object storing the capabilities of the pin.",
            "itemtype": "method",
            "name": "getCapabilities",
            "return": {
                "description": "An object describing the capabilities of this Pin.",
                "type": "Object"
            },
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 271,
            "description": "This method should only be used internally.",
            "access": "private",
            "tagname": "",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 279,
            "description": "Dispatch a Change event whenever a pin value changes",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "detectChange",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 297,
            "description": "From funnel Pin.as",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "clearWeight",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 307,
            "description": "From funnel Pin.as",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "calculateMinMaxAndMean",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 325,
            "description": "Resets the minimum, maximum, average and lastValue of the pin.",
            "itemtype": "method",
            "name": "clear",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 334,
            "description": "Add a new filter to the Pin.",
            "itemtype": "method",
            "name": "addFilter",
            "params": [
                {
                    "name": "newFilter",
                    "description": "A filter object that extends \nFilterBase.",
                    "type": "FilterBase"
                }
            ],
            "see": [
                "BO.filters.Convolution",
                "BO.filters.Scaler",
                "BO.filters.TriggerPoint"
            ],
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 356,
            "description": "Remove a specified filter from the Pin.",
            "itemtype": "method",
            "name": "removeFilter",
            "params": [
                {
                    "name": "filterToRemove",
                    "description": "The filter to remove.",
                    "type": "FilterBase"
                }
            ],
            "see": [
                "BO.filters.Convolution",
                "BO.filters.Scaler",
                "BO.filters.TriggerPoint"
            ],
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 378,
            "description": "Add a new generator to the Pin. A pin can only have one generator\nassigned. \nAssigning a new generator will replace the previously assigned \ngenerator.",
            "itemtype": "method",
            "name": "addGenerator",
            "params": [
                {
                    "name": "newGenerator",
                    "description": "A generator object that extends \nGeneratorBase.",
                    "type": "GeneratorBase"
                }
            ],
            "see": [
                "BO.generators.Oscillator"
            ],
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 394,
            "description": "Removes the generator from the pin.",
            "itemtype": "method",
            "name": "removeGenerator",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 405,
            "description": "Removes all filters from the pin.",
            "itemtype": "method",
            "name": "removeAllFilters",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 413,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "autoSetValue",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 422,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "applyFilters",
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 444,
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to be called when the event \nis fired",
                    "type": "Function"
                }
            ],
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 453,
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to be called when the event \nis fired",
                    "type": "Function"
                }
            ],
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 462,
            "params": [
                {
                    "name": "type",
                    "description": "The event type\nreturn {boolean} True is listener exists for this type, false if not.",
                    "type": "String"
                }
            ],
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 470,
            "params": [
                {
                    "name": "type",
                    "description": "The Event object",
                    "type": "PinEvent"
                },
                {
                    "name": "optionalParams",
                    "description": "Optional parameters to assign to the \nevent object.\nreturn {boolean} True if dispatch is successful, false if not.",
                    "type": "Object"
                }
            ],
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 482,
            "itemtype": "property",
            "name": "Pin.HIGH",
            "static": 1,
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 487,
            "itemtype": "property",
            "name": "Pin.LOW",
            "static": 1,
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 492,
            "itemtype": "property",
            "name": "Pin.ON",
            "static": 1,
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 497,
            "itemtype": "property",
            "name": "Pin.OFF",
            "static": 1,
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 504,
            "itemtype": "property",
            "name": "Pin.DIN",
            "static": 1,
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 509,
            "itemtype": "property",
            "name": "Pin.DOUT",
            "static": 1,
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 514,
            "itemtype": "property",
            "name": "Pin.AIN",
            "static": 1,
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 519,
            "itemtype": "property",
            "name": "Pin.AOUT",
            "static": 1,
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 524,
            "itemtype": "property",
            "name": "Pin.PWM",
            "static": 1,
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 529,
            "itemtype": "property",
            "name": "Pin.SERVO",
            "static": 1,
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 534,
            "itemtype": "property",
            "name": "Pin.SHIFT",
            "static": 1,
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 539,
            "itemtype": "property",
            "name": "Pin.I2C",
            "static": 1,
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 544,
            "itemtype": "property",
            "name": "Pin.ONEWIRE",
            "static": 1,
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 549,
            "itemtype": "property",
            "name": "Pin.STEPPER",
            "static": 1,
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 554,
            "itemtype": "property",
            "name": "Pin.TOTAL_PIN_MODES",
            "static": 1,
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 563,
            "description": "The pinChange event is dispatched when the pin value changes.",
            "type": "BO.PinEvent.CHANGE",
            "itemtype": "event",
            "name": "pinChange",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the Pin object.",
                    "type": "BO.Pin"
                }
            ],
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 570,
            "description": "The risingEdge event is dispatched when the pin value increased \n(from 0 to 1).",
            "type": "BO.PinEvent.RISING_EDGE",
            "itemtype": "event",
            "name": "risingEdge",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the Pin object.",
                    "type": "BO.Pin"
                }
            ],
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/Pin.js",
            "line": 578,
            "description": "The change event is dispatched when the pin value decreased \n(from 1 to 0).",
            "type": "BO.PinEvent.FALLING_EDGE",
            "itemtype": "event",
            "name": "fallingEdge",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the Pin object.",
                    "type": "BO.Pin"
                }
            ],
            "class": "BO.Pin",
            "namespace": "BO"
        },
        {
            "file": "src/core/PinEvent.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.PinEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/PinEvent.js",
            "line": 32,
            "itemtype": "property",
            "name": "PinEvent.CHANGE",
            "static": 1,
            "class": "BO.PinEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/PinEvent.js",
            "line": 37,
            "itemtype": "property",
            "name": "PinEvent.RISING_EDGE",
            "static": 1,
            "class": "BO.PinEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/PinEvent.js",
            "line": 42,
            "itemtype": "property",
            "name": "PinEvent.FALLING_EDGE",
            "static": 1,
            "class": "BO.PinEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketEvent.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.WSocketEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketEvent.js",
            "line": 32,
            "itemtype": "property",
            "name": "WSocketEvent.CONNECTED",
            "static": 1,
            "class": "BO.WSocketEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketEvent.js",
            "line": 37,
            "itemtype": "property",
            "name": "WSocketEvent.MESSAGE",
            "static": 1,
            "class": "BO.WSocketEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketEvent.js",
            "line": 42,
            "itemtype": "property",
            "name": "WSocketEvent.CLOSE",
            "static": 1,
            "class": "BO.WSocketEvent",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketWrapper.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.WSocketWrapper",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketWrapper.js",
            "line": 47,
            "description": "Initialize the websocket",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "self",
                    "description": "A reference to this websocket object.",
                    "type": "Object"
                }
            ],
            "class": "BO.WSocketWrapper",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketWrapper.js",
            "line": 60,
            "class": "BO.WSocketWrapper",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketWrapper.js",
            "line": 67,
            "class": "BO.WSocketWrapper",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketWrapper.js",
            "line": 92,
            "class": "BO.WSocketWrapper",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketWrapper.js",
            "line": 96,
            "class": "BO.WSocketWrapper",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketWrapper.js",
            "line": 100,
            "class": "BO.WSocketWrapper",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketWrapper.js",
            "line": 116,
            "description": "Send a message\nTO DO: support sending ArrayBuffers and Blobs\nFor now, forward any calls to sendString",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "message",
                    "description": "The message to send",
                    "type": "String"
                }
            ],
            "class": "BO.WSocketWrapper",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketWrapper.js",
            "line": 130,
            "description": "Send a message",
            "itemtype": "method",
            "name": "sendString",
            "params": [
                {
                    "name": "message",
                    "description": "The message to send",
                    "type": "String"
                }
            ],
            "class": "BO.WSocketWrapper",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketWrapper.js",
            "line": 142,
            "description": "[read-only] Wrapper for the readyState method of the native websocket implementation\n<p>CONNECTING = 0, OPEN = 1, CLOSING = 2, CLOSED = 3</p>",
            "itemtype": "property",
            "name": "readyState",
            "type": "String",
            "class": "BO.WSocketWrapper",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketWrapper.js",
            "line": 155,
            "description": "The webSocketConnected event is dispatched when a connection with\nthe websocket is established.",
            "type": "BO.WebsocketEvent.CONNECTED",
            "itemtype": "event",
            "name": "webSocketConnected",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the WSocketWrapper object.",
                    "type": "BO.WSocketWrapper"
                }
            ],
            "class": "BO.WSocketWrapper",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketWrapper.js",
            "line": 163,
            "description": "The webSocketMessage event is dispatched when a websocket message is received.",
            "type": "BO.WebsocketEvent.MESSAGE",
            "itemtype": "event",
            "name": "webSocketMessage",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the WSocketWrapper object.",
                    "type": "BO.WSocketWrapper"
                },
                {
                    "name": "message",
                    "description": "The websocket data",
                    "type": "String"
                }
            ],
            "class": "BO.WSocketWrapper",
            "namespace": "BO"
        },
        {
            "file": "src/core/WSocketWrapper.js",
            "line": 171,
            "description": "The webSocketClosed event is dispatched the websocket connection is closed.",
            "type": "BO.WebsocketEvent.CLOSE",
            "itemtype": "event",
            "name": "webSocketClosed",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the WSocketWrapper object.",
                    "type": "BO.WSocketWrapper"
                }
            ],
            "class": "BO.WSocketWrapper",
            "namespace": "BO"
        },
        {
            "file": "src/core/core.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.custom.ID12RFIDReader",
            "namespace": "BO"
        },
        {
            "file": "src/core/core.js",
            "line": 7,
            "version": "0.3.0\n\n<p>Namespace for Breakout objects.</p>\n\n<p>You can use the shorthand \"BO\" instead of \"BREAKOUT\".</p>",
            "class": "BO.custom.ID12RFIDReader",
            "namespace": "BO"
        },
        {
            "file": "src/core/core.js",
            "line": 23,
            "description": "The BO.enableDebugging flag can be set to true in an application\nto print debug messages from various Breakout objects to the\nconsole. By default it is false and only needs to be included\nin an application if you intend to set it to true",
            "name": "BO#enableDebugging",
            "type": "{Boolean}",
            "class": "BO.custom.ID12RFIDReader",
            "namespace": "BO"
        },
        {
            "file": "src/custom/ID12RFIDReader.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.custom.ID12RFIDReader",
            "namespace": "BO"
        },
        {
            "file": "src/custom/ID12RFIDReader.js",
            "line": 8,
            "class": "BO.custom.ID12RFIDReader",
            "namespace": "BO.custom"
        },
        {
            "file": "src/custom/ID12RFIDReader.js",
            "line": 65,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onSysExMessage",
            "class": "BO.custom.ID12RFIDReader",
            "namespace": "BO.custom"
        },
        {
            "file": "src/custom/ID12RFIDReader.js",
            "line": 81,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "dec2hex",
            "class": "BO.custom.ID12RFIDReader",
            "namespace": "BO.custom"
        },
        {
            "file": "src/custom/ID12RFIDReader.js",
            "line": 89,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "processRFIDData",
            "class": "BO.custom.ID12RFIDReader",
            "namespace": "BO.custom"
        },
        {
            "file": "src/custom/ID12RFIDReader.js",
            "line": 115,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "dispatch",
            "class": "BO.custom.ID12RFIDReader",
            "namespace": "BO.custom"
        },
        {
            "file": "src/custom/ID12RFIDReader.js",
            "line": 127,
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to be called when the event is fired",
                    "type": "Function"
                }
            ],
            "class": "BO.custom.ID12RFIDReader",
            "namespace": "BO.custom"
        },
        {
            "file": "src/custom/ID12RFIDReader.js",
            "line": 135,
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to be called when the event is fired",
                    "type": "Function"
                }
            ],
            "class": "BO.custom.ID12RFIDReader",
            "namespace": "BO.custom"
        },
        {
            "file": "src/custom/ID12RFIDReader.js",
            "line": 143,
            "params": [
                {
                    "name": "type",
                    "description": "The event type\nreturn {boolean} True is listener exists for this type, false if not.",
                    "type": "String"
                }
            ],
            "class": "BO.custom.ID12RFIDReader",
            "namespace": "BO.custom"
        },
        {
            "file": "src/custom/ID12RFIDReader.js",
            "line": 151,
            "params": [
                {
                    "name": "type",
                    "description": "The Event object",
                    "type": "Event"
                },
                {
                    "name": "optionalParams",
                    "description": "Optional parameters to assign to the event object.\nreturn {boolean} True if dispatch is successful, false if not.",
                    "type": "Object"
                }
            ],
            "class": "BO.custom.ID12RFIDReader",
            "namespace": "BO.custom"
        },
        {
            "file": "src/custom/ID12RFIDReader.js",
            "line": 165,
            "description": "The addTag event is dispatched when a new tag is read.",
            "type": "BO.custom.RFIDEvent.ADD_TAG",
            "itemtype": "event",
            "name": "addTag",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the ID12RFIDReader object.",
                    "type": "BO.custom.ID12RFIDReader"
                },
                {
                    "name": "tag",
                    "description": "The RFID tag value.",
                    "type": "String"
                }
            ],
            "class": "BO.custom.ID12RFIDReader",
            "namespace": "BO.custom"
        },
        {
            "file": "src/custom/ID12RFIDReader.js",
            "line": 173,
            "description": "The removeTag event is dispatched when a tag is removed from the reader.",
            "type": "BO.custom.RFIDEvent.REMOVE_TAG",
            "itemtype": "event",
            "name": "removeTag",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the ID12RFIDReader object.",
                    "type": "BO.custom.ID12RFIDReader"
                },
                {
                    "name": "tag",
                    "description": "The RFID tag value.",
                    "type": "String"
                }
            ],
            "class": "BO.custom.ID12RFIDReader",
            "namespace": "BO.custom"
        },
        {
            "file": "src/custom/RFIDEvent.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.custom.RFIDEvent",
            "namespace": "BO.custom"
        },
        {
            "file": "src/custom/RFIDEvent.js",
            "line": 34,
            "itemtype": "property",
            "name": "RFIDEvent.ADD_TAG",
            "static": 1,
            "class": "BO.custom.RFIDEvent",
            "namespace": "BO.custom"
        },
        {
            "file": "src/custom/RFIDEvent.js",
            "line": 39,
            "itemtype": "property",
            "name": "RFIDEvent.REMOVE_TAG",
            "static": 1,
            "class": "BO.custom.RFIDEvent",
            "namespace": "BO.custom"
        },
        {
            "file": "src/custom/RFIDEvent.js",
            "line": 48,
            "description": "[read-only] The RFID tag value (hexadecimal string).",
            "itemtype": "property",
            "name": "tag",
            "type": "String",
            "class": "BO.custom.RFIDEvent",
            "namespace": "BO.custom"
        },
        {
            "file": "src/filters/Convolution.js",
            "line": 1,
            "description": "Based on Convolution.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.filters.Convolution",
            "namespace": "BO.custom"
        },
        {
            "file": "src/filters/Convolution.js",
            "line": 14,
            "class": "BO.filters.Convolution",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/Convolution.js",
            "line": 50,
            "description": "An array of coefficients to be used with product-sum operations for input buffers. \nIf assigned a new array, the input buffer will be cleared.",
            "itemtype": "property",
            "name": "coef",
            "type": "Number[]",
            "class": "BO.filters.Convolution",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/Convolution.js",
            "line": 68,
            "description": "Override FilterBase.processSample",
            "class": "BO.filters.Convolution",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/Convolution.js",
            "line": 85,
            "description": "Low-pass filter kernel. Use by passing this array to the constructor.",
            "itemtype": "property",
            "name": "Convolution.LPF",
            "static": 1,
            "class": "BO.filters.Convolution",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/Convolution.js",
            "line": 92,
            "description": "High-pass filter kernel. Use by passing this array to the constructor.",
            "itemtype": "property",
            "name": "Convolution.HPF",
            "static": 1,
            "class": "BO.filters.Convolution",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/Convolution.js",
            "line": 99,
            "description": "Moving average filter kernel. Use by passing this array to the constructor.",
            "itemtype": "property",
            "name": "Convolution.MOVING_AVERAGE",
            "static": 1,
            "class": "BO.filters.Convolution",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/FilterBase.js",
            "line": 1,
            "description": "Based on IFilter.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.filters.FilterBase",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/FilterBase.js",
            "line": 30,
            "description": "Process the value to be filtered and return the filtered result.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "processSample",
            "params": [
                {
                    "name": "val",
                    "description": "The input value to be filtered.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The resulting value after applying the filter.",
                "type": "Number"
            },
            "class": "BO.filters.FilterBase",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/Scaler.js",
            "line": 1,
            "description": "Based on Scaler.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.filters.Scaler",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/Scaler.js",
            "line": 55,
            "description": "Override FilterBase.processSample",
            "class": "BO.filters.Scaler",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/Scaler.js",
            "line": 69,
            "description": "y = x",
            "itemtype": "method",
            "name": "Scaler.LINEAR",
            "static": 1,
            "class": "BO.filters.Scaler",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/Scaler.js",
            "line": 78,
            "description": "y = x * x",
            "itemtype": "method",
            "name": "Scaler.SQUARE",
            "static": 1,
            "class": "BO.filters.Scaler",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/Scaler.js",
            "line": 87,
            "description": "y = sqrt(x)",
            "itemtype": "method",
            "name": "Scaler.SQUARE_ROOT",
            "static": 1,
            "class": "BO.filters.Scaler",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/Scaler.js",
            "line": 96,
            "description": "y = x^4",
            "itemtype": "method",
            "name": "Scaler.CUBE",
            "static": 1,
            "class": "BO.filters.Scaler",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/Scaler.js",
            "line": 105,
            "description": "y = pow(x, 1/4)",
            "itemtype": "method",
            "name": "Scaler.CUBE_ROOT",
            "static": 1,
            "class": "BO.filters.Scaler",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/TriggerPoint.js",
            "line": 1,
            "description": "Based on SetPoint.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.filters.TriggerPoint",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/TriggerPoint.js",
            "line": 64,
            "description": "Override FilterBase.processSample",
            "class": "BO.filters.TriggerPoint",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/TriggerPoint.js",
            "line": 82,
            "itemtype": "method",
            "name": "addPoint",
            "class": "BO.filters.TriggerPoint",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/TriggerPoint.js",
            "line": 90,
            "itemtype": "method",
            "name": "removePoint",
            "class": "BO.filters.TriggerPoint",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/TriggerPoint.js",
            "line": 99,
            "itemtype": "method",
            "name": "removeAllPoints",
            "class": "BO.filters.TriggerPoint",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/TriggerPoint.js",
            "line": 107,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "updateRange",
            "class": "BO.filters.TriggerPoint",
            "namespace": "BO.filters"
        },
        {
            "file": "src/filters/TriggerPoint.js",
            "line": 137,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getKeys",
            "class": "BO.filters.TriggerPoint",
            "namespace": "BO.filters"
        },
        {
            "file": "src/generators/GeneratorBase.js",
            "line": 1,
            "description": "Based on IGenerator.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <jeff.hoefs@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.generators.GeneratorBase",
            "namespace": "BO.filters"
        },
        {
            "file": "src/generators/GeneratorBase.js",
            "line": 14,
            "class": "BO.generators.GeneratorBase",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/GeneratorBase.js",
            "line": 45,
            "description": "[read-only] Get a generated number.",
            "access": "protected",
            "tagname": "",
            "itemtype": "property",
            "name": "value",
            "type": "Number",
            "class": "BO.generators.GeneratorBase",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/GeneratorBase.js",
            "line": 55,
            "description": "Use setValue() instead?",
            "access": "protected",
            "tagname": "",
            "class": "BO.generators.GeneratorBase",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/GeneratorEvent.js",
            "line": 1,
            "description": "Based on GeneratorEvent.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.generators.GeneratorEvent",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/GeneratorEvent.js",
            "line": 41,
            "itemtype": "property",
            "name": "GeneratorEvent.UPDATE",
            "static": 1,
            "class": "BO.generators.GeneratorEvent",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/Oscillator.js",
            "line": 1,
            "description": "Based on Osc.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.generators.Oscillator",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/Oscillator.js",
            "line": 76,
            "description": "The service interval in milliseconds. Default is 33ms.",
            "itemtype": "property",
            "name": "serviceInterval",
            "type": "Number",
            "class": "BO.generators.Oscillator",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/Oscillator.js",
            "line": 88,
            "description": "Starts the oscillator.",
            "itemtype": "method",
            "name": "start",
            "class": "BO.generators.Oscillator",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/Oscillator.js",
            "line": 101,
            "description": "Stops the oscillator.",
            "itemtype": "method",
            "name": "stop",
            "class": "BO.generators.Oscillator",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/Oscillator.js",
            "line": 111,
            "description": "Resets the oscillator.",
            "itemtype": "method",
            "name": "reset",
            "class": "BO.generators.Oscillator",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/Oscillator.js",
            "line": 120,
            "description": "By default the interval is 33 milliseconds. The Osc is updated every 33ms.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "interval",
                    "description": "The update interval in milliseconds.",
                    "type": "Number"
                }
            ],
            "class": "BO.generators.Oscillator",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/Oscillator.js",
            "line": 136,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "autoUpdate",
            "class": "BO.generators.Oscillator",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/Oscillator.js",
            "line": 146,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "computeValue",
            "class": "BO.generators.Oscillator",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/Oscillator.js",
            "line": 171,
            "description": "sine wave",
            "itemtype": "method",
            "name": "Oscillator.SIN",
            "static": 1,
            "class": "BO.generators.Oscillator",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/Oscillator.js",
            "line": 180,
            "description": "square wave",
            "itemtype": "method",
            "name": "Oscillator.SQUARE",
            "static": 1,
            "class": "BO.generators.Oscillator",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/Oscillator.js",
            "line": 189,
            "description": "triangle wave",
            "itemtype": "method",
            "name": "Oscillator.TRIANGLE",
            "static": 1,
            "class": "BO.generators.Oscillator",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/Oscillator.js",
            "line": 199,
            "description": "saw wave",
            "itemtype": "method",
            "name": "Oscillator.SAW",
            "static": 1,
            "class": "BO.generators.Oscillator",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/Oscillator.js",
            "line": 214,
            "description": "impulse",
            "itemtype": "method",
            "name": "Oscillator.IMPULSE",
            "static": 1,
            "class": "BO.generators.Oscillator",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/Oscillator.js",
            "line": 223,
            "description": "linear",
            "itemtype": "method",
            "name": "Oscillator.LINEAR",
            "static": 1,
            "class": "BO.generators.Oscillator",
            "namespace": "BO.generators"
        },
        {
            "file": "src/generators/Oscillator.js",
            "line": 234,
            "description": "The update event is dispatched at the rate specified \nby the serviceInterval parameter (default = 33ms).",
            "type": "BO.generators.GeneratorEvent.UPDATE",
            "itemtype": "event",
            "name": "update",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the Oscillator object.",
                    "type": "BO.generators.Oscillator"
                }
            ],
            "class": "BO.generators.Oscillator",
            "namespace": "BO.generators"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.generators"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 8,
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 86,
            "description": "[read-only] the accelerometer dynamic range in Gs (either 2G, 4G, 8G, or 16G for this sensor)..",
            "itemtype": "property",
            "name": "dynamicRange",
            "type": "Number",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 93,
            "description": "[read-only] The acceleration value in Gs (9.8m/sec^2) along the x-axis.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 100,
            "description": "[read-only] The acceleration value in Gs (9.8m/sec^2) along the y-axis.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 107,
            "description": "[read-only] The acceleration value in Gs (9.8m/sec^2) along the z-axis.",
            "itemtype": "property",
            "name": "z",
            "type": "Number",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 114,
            "description": "[read-only] The pitch value in degrees",
            "itemtype": "property",
            "name": "pitch",
            "type": "Number",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 126,
            "description": "[read-only] The roll value in degrees",
            "itemtype": "property",
            "name": "roll",
            "type": "Number",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 140,
            "description": "The raw value of the x axis",
            "itemtype": "property",
            "name": "rawX",
            "type": "Number",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 147,
            "description": "The raw value of the y axis",
            "itemtype": "property",
            "name": "rawY",
            "type": "Number",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 154,
            "description": "The raw value of the z axis",
            "itemtype": "property",
            "name": "rawZ",
            "type": "Number",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 161,
            "description": "[read-only] The state of continuous read mode. True if continuous read mode\nis enabled, false if it is disabled.",
            "itemtype": "property",
            "name": "isRunning",
            "type": "Boolean",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 169,
            "description": "The sensitivity value for the x axis (default value = 0.0390625).",
            "itemtype": "property",
            "name": "sensitivityX",
            "type": "Number",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 177,
            "description": "The sensitivity value for the y axis (default value = 0.0390625).",
            "itemtype": "property",
            "name": "sensitivityY",
            "type": "Number",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 185,
            "description": "The sensitivity value for the z axis (default value = 0.0390625).",
            "itemtype": "property",
            "name": "sensitivityZ",
            "type": "Number",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 193,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setRangeAndFullRes",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 224,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "handleI2C",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 245,
            "description": "Start continuous reading of the sensor.",
            "itemtype": "method",
            "name": "startReading",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 256,
            "description": "Stop continuous reading of the sensor.",
            "itemtype": "method",
            "name": "stopReading",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 265,
            "description": "Offset the x, y, or z axis output by the respective input value.",
            "itemtype": "method",
            "name": "setAxisOffset",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 280,
            "description": "Get the value of the x, y, and z axis offset.",
            "itemtype": "method",
            "name": "getAxisOffset",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 296,
            "description": "Sends read request to accelerometer and updates accelerometer values.",
            "itemtype": "method",
            "name": "update",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 308,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "powerOn",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 321,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setRegisterBit",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 337,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "readAccel",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 378,
            "description": "for debugging",
            "access": "private",
            "tagname": "",
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 390,
            "itemtype": "property",
            "name": "AccelerometerADXL345.RANGE_2G",
            "static": 1,
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 395,
            "itemtype": "property",
            "name": "AccelerometerADXL345.RANGE_4G",
            "static": 1,
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 400,
            "itemtype": "property",
            "name": "AccelerometerADXL345.RANGE_8G",
            "static": 1,
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 405,
            "itemtype": "property",
            "name": "AccelerometerADXL345.RANGE_16G",
            "static": 1,
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 410,
            "itemtype": "property",
            "name": "AccelerometerADXL345.DEVICE_ID",
            "static": 1,
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 415,
            "itemtype": "property",
            "name": "AccelerometerADXL345.DEFAULT_SENSITIVITY",
            "static": 1,
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerADXL345.js",
            "line": 423,
            "description": "The update event is dispatched when the accelerometer values are updated.",
            "type": "BO.io.AccelerometerEvent.UPDATE",
            "itemtype": "event",
            "name": "update",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the AccelerometerADXL345 object.",
                    "type": "BO.io.AccelerometerADXL345"
                }
            ],
            "class": "BO.io.AccelerometerADXL345",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerEvent.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.AccelerometerEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AccelerometerEvent.js",
            "line": 30,
            "itemtype": "property",
            "name": "AccelerometerEvent.UPDATE",
            "static": 1,
            "class": "BO.io.AccelerometerEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AnalogAccelerometer.js",
            "line": 1,
            "description": "Based on Accelerometer.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.AnalogAccelerometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AnalogAccelerometer.js",
            "line": 96,
            "description": "[read-only] The current range setting of the accelerometer in units \nof gravity (9.8 m/sec2).",
            "itemtype": "property",
            "name": "dynamicRange",
            "type": "Number",
            "class": "BO.io.AnalogAccelerometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AnalogAccelerometer.js",
            "line": 104,
            "description": "[read-only] The x axis of the accelerometer in units \nof gravity (9.8 m/sec2).",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "BO.io.AnalogAccelerometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AnalogAccelerometer.js",
            "line": 112,
            "description": "[read-only] The y axis of the accelerometer in units \nof gravity (9.8 m/sec2).",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "BO.io.AnalogAccelerometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AnalogAccelerometer.js",
            "line": 120,
            "description": "[read-only] The z axis of the accelerometer in units \nof gravity (9.8 m/sec2).",
            "itemtype": "property",
            "name": "z",
            "type": "Number",
            "class": "BO.io.AnalogAccelerometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AnalogAccelerometer.js",
            "line": 128,
            "description": "[read-only] The pitch value in degrees.",
            "itemtype": "property",
            "name": "pitch",
            "type": "Number",
            "class": "BO.io.AnalogAccelerometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AnalogAccelerometer.js",
            "line": 140,
            "description": "[read-only] The roll value in degrees.",
            "itemtype": "property",
            "name": "roll",
            "type": "Number",
            "class": "BO.io.AnalogAccelerometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AnalogAccelerometer.js",
            "line": 166,
            "description": "Scale the range for the specified axis (from 0 to 1) to (minimum to \nmaximum).",
            "itemtype": "method",
            "name": "setRangeFor",
            "params": [
                {
                    "name": "axis",
                    "description": "the axis to set new range (AnalogAccelerometer.X_AXIS, \nAnalogAccelerometer.Y_AXIS or AnalogAccelerometer.Z_AXIS)."
                },
                {
                    "name": "minimum",
                    "description": "The new minimum value",
                    "type": "Number"
                },
                {
                    "name": "maximum",
                    "description": "The new maximum value",
                    "type": "Number"
                }
            ],
            "class": "BO.io.AnalogAccelerometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AnalogAccelerometer.js",
            "line": 209,
            "description": "Use this method to get the minimum and maximum range values for an axis.\nCreate a new object to store the return value and then pass obj.min\nand obj.max along with the respective axis identifier to the setRangeFor\nmethod.",
            "itemtype": "method",
            "name": "getCalibratedRange",
            "params": [
                {
                    "name": "minVoltage",
                    "description": "The minimum value reported on the axis",
                    "type": "Number"
                },
                {
                    "name": "maxVoltage",
                    "description": "The maximum value reported on the axis",
                    "type": "Number"
                },
                {
                    "name": "supplyVoltage",
                    "description": "The supply voltage of the Acceleromter\n(enter as 3.3, 3.0, 5.0, etc).",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An object containing the min and max range values to be\npassed to the setRangeFor method.",
                "type": "Object"
            },
            "class": "BO.io.AnalogAccelerometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AnalogAccelerometer.js",
            "line": 237,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "xAxisChanged",
            "class": "BO.io.AnalogAccelerometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AnalogAccelerometer.js",
            "line": 246,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "yAxisChanged",
            "class": "BO.io.AnalogAccelerometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AnalogAccelerometer.js",
            "line": 255,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "zAxisChanged",
            "class": "BO.io.AnalogAccelerometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AnalogAccelerometer.js",
            "line": 264,
            "itemtype": "property",
            "name": "AnalogAccelerometer.X_AXIS",
            "static": 1,
            "class": "BO.io.AnalogAccelerometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AnalogAccelerometer.js",
            "line": 269,
            "itemtype": "property",
            "name": "AnalogAccelerometer.Y_AXIS",
            "static": 1,
            "class": "BO.io.AnalogAccelerometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AnalogAccelerometer.js",
            "line": 274,
            "itemtype": "property",
            "name": "AnalogAccelerometer.Z_AXIS",
            "static": 1,
            "class": "BO.io.AnalogAccelerometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/AnalogAccelerometer.js",
            "line": 283,
            "description": "The update event is dispatched when the accelerometer values are updated.",
            "type": "BO.io.AccelerometerEvent.UPDATE",
            "itemtype": "event",
            "name": "update",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the \nAnalogAccelerometer object.",
                    "type": "BO.io.AnalogAccelerometer"
                }
            ],
            "class": "BO.io.AnalogAccelerometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BiColorLED.js",
            "line": 1,
            "description": "Based on RGBLED.js which was written by Jeff Hoefs.\n\nCopyright (c) 2012-2013 Fabian Affolter <mail@fabian-affolter.ch>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.BiColorLED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BiColorLED.js",
            "line": 66,
            "description": "Set the bi-color LED color.",
            "itemtype": "method",
            "name": "setColor",
            "params": [
                {
                    "name": "color1",
                    "description": "The value (0 - 255) of the first color",
                    "type": "Number"
                },
                {
                    "name": "color2",
                    "description": "The value (0 - 255) of the second\ncolor",
                    "type": "Number"
                }
            ],
            "class": "BO.io.BiColorLED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BiColorLED.js",
            "line": 82,
            "description": "Fade in the bi-color LED from the off state.",
            "itemtype": "method",
            "name": "fadeIn",
            "params": [
                {
                    "name": "time",
                    "description": "The time of the fade (in milliseconds)",
                    "type": "Number"
                }
            ],
            "class": "BO.io.BiColorLED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BiColorLED.js",
            "line": 94,
            "description": "Fade out the bi-color LED from the on state.",
            "itemtype": "method",
            "name": "fadeOut",
            "params": [
                {
                    "name": "time",
                    "description": "The time of the fade (in milliseconds)",
                    "type": "Number"
                }
            ],
            "class": "BO.io.BiColorLED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BiColorLED.js",
            "line": 106,
            "description": "Fade from the current color to the new color.",
            "itemtype": "method",
            "name": "fadeTo",
            "params": [
                {
                    "name": "color1",
                    "description": "The value of the first color to fade\nto (0 - 255)",
                    "type": "Number"
                },
                {
                    "name": "color2",
                    "description": "The value of the second color to fade\nto (0 - 255)",
                    "type": "Number"
                },
                {
                    "name": "time",
                    "description": "The time of the fade (in milliseconds)",
                    "type": "Number"
                }
            ],
            "class": "BO.io.BiColorLED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BiColorLED.js",
            "line": 126,
            "itemtype": "property",
            "name": "BiColorLED.COMMON_ANODE",
            "static": 1,
            "class": "BO.io.BiColorLED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BiColorLED.js",
            "line": 131,
            "itemtype": "property",
            "name": "BiColorLED.COMMON_CATHODE",
            "static": 1,
            "class": "BO.io.BiColorLED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BlinkM.js",
            "line": 1,
            "description": "Based on BlinkM.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.BlinkM",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BlinkM.js",
            "line": 49,
            "description": "Sets the BlinkM to the specified RGB color immediately.",
            "itemtype": "method",
            "name": "goToRGBColorNow",
            "params": [
                {
                    "name": "}",
                    "description": "color An array containing the RGB values. \ncolor[0] = R, color[1] = G, color[2] = B",
                    "type": "Number"
                }
            ],
            "class": "BO.io.BlinkM",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BlinkM.js",
            "line": 60,
            "description": "Fades to the specified RGB color in the specified time duration. \nThe fade speed range is from 1 to 255, where 1 is the slowest time and\n255 is the fastest.",
            "itemtype": "method",
            "name": "fadeToRGBColor",
            "params": [
                {
                    "name": "color",
                    "description": "An array containing the RGB values.\ncolor[0] = R, color[1] = G, color[2] = B",
                    "type": "Number[]"
                },
                {
                    "name": "speed",
                    "description": "The fade speed. Default value is 15.",
                    "type": "Number"
                }
            ],
            "class": "BO.io.BlinkM",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BlinkM.js",
            "line": 78,
            "description": "Fade to a random RGB color.\nThe fade speed range is from 1 to 255, where 1 is the slowest time and\n255 is the fastest.",
            "itemtype": "method",
            "name": "fadeToRandomRGBColor",
            "params": [
                {
                    "name": "colorRange",
                    "description": "An array containing a range for each color\nvalue.\ncolorRange[0] = range for Red (0-255), colorRange[1] = range for Green, etc.",
                    "type": "Number[]"
                },
                {
                    "name": "speed",
                    "description": "The fade speed. Default value is 15.",
                    "type": "Number"
                }
            ],
            "class": "BO.io.BlinkM",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BlinkM.js",
            "line": 97,
            "description": "Fades to the specified HSB color in the specified time duration. \nThe fade speed range is from 1 to 255, where 1 is the slowest time and\n255 is the fastest.",
            "itemtype": "method",
            "name": "fadeToHSBColor",
            "params": [
                {
                    "name": "color",
                    "description": "An array containing the HSB values.\ncolor[0] = H, color[1] = S, color[2] = B",
                    "type": "Number[]"
                },
                {
                    "name": "speed",
                    "description": "The fade speed. Default value is 15.",
                    "type": "Number"
                }
            ],
            "class": "BO.io.BlinkM",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BlinkM.js",
            "line": 115,
            "description": "Fade to a random HSB color.\nThe fade speed range is from 1 to 255, where 1 is the slowest time and\n255 is the fastest.",
            "itemtype": "method",
            "name": "fadeToRandomHSBColor",
            "params": [
                {
                    "name": "colorRange",
                    "description": "An array containing a range for each color\nvalue.\ncolorRange[0] = range for Hue (0-255), colorRange[1] = range for\nSaturation, etc.",
                    "type": "Number[]"
                },
                {
                    "name": "speed",
                    "description": "The fade speed. Default value is 15.",
                    "type": "Number"
                }
            ],
            "class": "BO.io.BlinkM",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BlinkM.js",
            "line": 135,
            "description": "Set the rate at which color fading happens. The range is from 1 to 255,\nwhere 1 is the slowest and 255 is the fastest (immediate).",
            "itemtype": "method",
            "name": "setFadeSpeed",
            "params": [
                {
                    "name": "speed",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "BO.io.BlinkM",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BlinkM.js",
            "line": 146,
            "description": "Play a predefined light script. See the BlinkM datasheet page 20 for a\nlist and description of the predefined scripts.",
            "itemtype": "method",
            "name": "playLightScript",
            "params": [
                {
                    "name": "scriptId",
                    "description": "The id of the light script (from 0 to 18).",
                    "type": "Number"
                },
                {
                    "name": "theNumberOfRepeats",
                    "description": "The number of times the script should\nrepeat.",
                    "type": "Number"
                },
                {
                    "name": "lineNumber",
                    "description": "The line number to begin the script from.",
                    "type": "Number"
                }
            ],
            "class": "BO.io.BlinkM",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BlinkM.js",
            "line": 161,
            "description": "Stop the currently playing predefined light script.",
            "itemtype": "method",
            "name": "stopScript",
            "class": "BO.io.BlinkM",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/BlinkM.js",
            "line": 170,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "handleI2C",
            "class": "BO.io.BlinkM",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Button.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.Button",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Button.js",
            "line": 80,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onPinChange",
            "class": "BO.io.Button",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Button.js",
            "line": 111,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "pressed",
            "class": "BO.io.Button",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Button.js",
            "line": 123,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "released",
            "class": "BO.io.Button",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Button.js",
            "line": 139,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "sustainedPress",
            "class": "BO.io.Button",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Button.js",
            "line": 153,
            "description": "The debounce time interval in milliseconds.",
            "itemtype": "property",
            "name": "debounceInterval",
            "type": "Number",
            "class": "BO.io.Button",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Button.js",
            "line": 161,
            "description": "The delay time (in milliseconds) the button must be held before a\nsustained press event is fired.",
            "itemtype": "property",
            "name": "sustainedPressInterval",
            "type": "Number",
            "class": "BO.io.Button",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Button.js",
            "line": 170,
            "description": "[read-only] The pin number of the pin the button is attached to.",
            "itemtype": "property",
            "name": "pinNumber",
            "type": "Number",
            "class": "BO.io.Button",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Button.js",
            "line": 177,
            "itemtype": "property",
            "name": "Button.PULL_DOWN",
            "static": 1,
            "class": "BO.io.Button",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Button.js",
            "line": 182,
            "itemtype": "property",
            "name": "Button.PULL_UP",
            "static": 1,
            "class": "BO.io.Button",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Button.js",
            "line": 187,
            "itemtype": "property",
            "name": "Button.INTERNAL_PULL_UP",
            "static": 1,
            "class": "BO.io.Button",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Button.js",
            "line": 196,
            "description": "The pressed event is dispatched when the button is pressed.",
            "type": "BO.io.ButtonEvent.PRESS",
            "itemtype": "event",
            "name": "pressed",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the Button object",
                    "type": "BO.io.Button"
                }
            ],
            "class": "BO.io.Button",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Button.js",
            "line": 203,
            "description": "The released event is dispatched when the button is released.",
            "type": "BO.io.ButtonEvent.RELEASE",
            "itemtype": "event",
            "name": "released",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the Button object",
                    "type": "BO.io.Button"
                }
            ],
            "class": "BO.io.Button",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Button.js",
            "line": 210,
            "description": "The longPress event is dispatched once when the button has been held for\nthe time duration specified by the sustainedPressInterval property.",
            "type": "BO.io.ButtonEvent.LONG_PRESS",
            "itemtype": "event",
            "name": "longPress",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the Button object",
                    "type": "BO.io.Button"
                }
            ],
            "class": "BO.io.Button",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Button.js",
            "line": 218,
            "description": "The sustainedPress event is dispatched continuously at the rate \nspecified by the sustainedPressInterval property while the button is\nheld.",
            "type": "BO.io.ButtonEvent.SUSTAINED_PRESS",
            "itemtype": "event",
            "name": "sustainedPress",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the Button object",
                    "type": "BO.io.Button"
                }
            ],
            "class": "BO.io.Button",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/ButtonEvent.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.ButtonEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/ButtonEvent.js",
            "line": 30,
            "itemtype": "property",
            "name": "ButtonEvent.PRESS",
            "static": 1,
            "class": "BO.io.ButtonEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/ButtonEvent.js",
            "line": 35,
            "itemtype": "property",
            "name": "ButtonEvent.RELEASE",
            "static": 1,
            "class": "BO.io.ButtonEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/ButtonEvent.js",
            "line": 40,
            "itemtype": "property",
            "name": "ButtonEvent.LONG_PRESS",
            "static": 1,
            "class": "BO.io.ButtonEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/ButtonEvent.js",
            "line": 45,
            "itemtype": "property",
            "name": "ButtonEvent.SUSTAINED_PRESS",
            "static": 1,
            "class": "BO.io.ButtonEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/CompassEvent.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.CompassEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/CompassEvent.js",
            "line": 30,
            "itemtype": "property",
            "name": "CompassEvent.UPDATE",
            "static": 1,
            "class": "BO.io.CompassEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/CompassHMC6352.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.CompassHMC6352",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/CompassHMC6352.js",
            "line": 51,
            "description": "[read-only] The heading in degrees.",
            "itemtype": "property",
            "name": "heading",
            "type": "Number",
            "class": "BO.io.CompassHMC6352",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/CompassHMC6352.js",
            "line": 58,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "handleI2C",
            "class": "BO.io.CompassHMC6352",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/CompassHMC6352.js",
            "line": 73,
            "description": "Start continuous reading of the sensor.",
            "itemtype": "method",
            "name": "startReading",
            "class": "BO.io.CompassHMC6352",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/CompassHMC6352.js",
            "line": 81,
            "description": "Stop continuous reading of the sensor",
            "itemtype": "method",
            "name": "stopReading",
            "class": "BO.io.CompassHMC6352",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/CompassHMC6352.js",
            "line": 92,
            "description": "The update event is dispatched when the compass heading is updated.",
            "type": "BO.io.CompassEvent.UPDATE",
            "itemtype": "event",
            "name": "update",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the CompassHMC6352 object.",
                    "type": "BO.io.CompassHMC6352"
                }
            ],
            "class": "BO.io.CompassHMC6352",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/DCMotor.js",
            "line": 1,
            "description": "Based on DCMotor.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.DCMotor",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/DCMotor.js",
            "line": 103,
            "description": "The value of the motor speed (-1.0 to 1.0). A speed of zero stops\nthe motor.",
            "itemtype": "property",
            "name": "value",
            "type": "Number",
            "class": "BO.io.DCMotor",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/DCMotor.js",
            "line": 124,
            "itemtype": "method",
            "name": "despin",
            "params": [
                {
                    "name": "useBrake",
                    "description": "Default = true",
                    "type": "Boolean"
                }
            ],
            "class": "BO.io.DCMotor",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/DCMotor.js",
            "line": 155,
            "itemtype": "method",
            "name": "forward",
            "params": [
                {
                    "name": "val",
                    "description": "The new voltage to set (0.0 to 1.0)",
                    "type": "Number"
                }
            ],
            "class": "BO.io.DCMotor",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/DCMotor.js",
            "line": 173,
            "itemtype": "method",
            "name": "reverse",
            "params": [
                {
                    "name": "val",
                    "description": "The new voltage to set (-1.0 to 0.0)",
                    "type": "Number"
                }
            ],
            "class": "BO.io.DCMotor",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroEvent.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.GyroEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroEvent.js",
            "line": 31,
            "itemtype": "property",
            "name": "GyroEvent.GYRO_READY",
            "static": 1,
            "class": "BO.io.GyroEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroEvent.js",
            "line": 36,
            "itemtype": "property",
            "name": "GyroEvent.UPDATE",
            "static": 1,
            "class": "BO.io.GyroEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 1,
            "description": "Based in part on Filipe Vieira'a ITG3200 library for Arduino.\n\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 82,
            "description": "[read-only] The state of continuous read mode. True if continuous read mode\nis enabled, false if it is disabled.",
            "itemtype": "property",
            "name": "isRunning",
            "type": "Boolean",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 90,
            "description": "[read-only] The x axis output value in degrees.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 99,
            "description": "[read-only] The y axis output value in degrees.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 108,
            "description": "[read-only] The z axis output value in degrees.",
            "itemtype": "property",
            "name": "z",
            "type": "Number",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 117,
            "description": "The raw x axis output value from the sensor.",
            "itemtype": "property",
            "name": "rawX",
            "type": "Number",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 124,
            "description": "The raw y axis output value from the sensor.",
            "itemtype": "property",
            "name": "rawY",
            "type": "Number",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 131,
            "description": "The raw z axis output value from the sensor.",
            "itemtype": "property",
            "name": "rawZ",
            "type": "Number",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 138,
            "description": "Set the polarity of the x, y, and z output values.",
            "itemtype": "method",
            "name": "setRevPolarity",
            "params": [
                {
                    "name": "xPol",
                    "description": "Polarity of the x axis",
                    "type": "Boolean"
                },
                {
                    "name": "yPol",
                    "description": "Polarity of the y axis",
                    "type": "Boolean"
                },
                {
                    "name": "zPol",
                    "description": "Polarity of the z axis",
                    "type": "Boolean"
                }
            ],
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 152,
            "description": "Offset the x, y, or z output by the respective input value.",
            "itemtype": "method",
            "name": "setOffsets",
            "params": [
                {
                    "name": "xOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "zOffset",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 166,
            "description": "Set the gain value for the x, y, or z output.",
            "itemtype": "method",
            "name": "setGains",
            "params": [
                {
                    "name": "xGain",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yGain",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "zGain",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 180,
            "description": "Start continuous reading of the sensor.",
            "itemtype": "method",
            "name": "startReading",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 191,
            "description": "Stop continuous reading of the sensor.",
            "itemtype": "method",
            "name": "stopReading",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 201,
            "description": "Sends read request to accelerometer and updates accelerometer values.",
            "itemtype": "method",
            "name": "update",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 214,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "init",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 236,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onGyroReady",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 249,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setRegisterBit",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 265,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "handleI2C",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 281,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "readGyro",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 318,
            "description": "for debugging",
            "access": "private",
            "tagname": "",
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 330,
            "description": "ID = 0x69 if sensor pin 9 (AD0) is tied to Power.",
            "itemtype": "property",
            "name": "GyroITG3200.ID_AD0_VDD",
            "static": 1,
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 337,
            "description": "ID = 0x68 if sensor pin 9 (AD0) is tied to Ground.",
            "itemtype": "property",
            "name": "GyroITG3200.ID_AD0_VDD",
            "static": 1,
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/GyroITG3200.js",
            "line": 347,
            "description": "The update event is dispatched when the accelerometer values are updated.",
            "type": "BO.io.GyroEvent.UPDATE",
            "itemtype": "event",
            "name": "update",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the GyroITG3200 object.",
                    "type": "BO.io.GyroITG3200"
                }
            ],
            "class": "BO.io.GyroITG3200",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/LED.js",
            "line": 1,
            "description": "Based on LED.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.LED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/LED.js",
            "line": 80,
            "description": "Get or set the current value (intensity) of the LED.",
            "itemtype": "property",
            "name": "intensity",
            "type": "Number",
            "class": "BO.io.LED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/LED.js",
            "line": 105,
            "description": "Turn the LED on.",
            "itemtype": "method",
            "name": "on",
            "class": "BO.io.LED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/LED.js",
            "line": 113,
            "description": "Turn the LED off.",
            "itemtype": "method",
            "name": "off",
            "class": "BO.io.LED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/LED.js",
            "line": 121,
            "description": "Check if the LED is on.",
            "itemtype": "method",
            "name": "isOn",
            "return": {
                "description": "True if the LED is on, false if it is off.",
                "type": "Boolean"
            },
            "class": "BO.io.LED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/LED.js",
            "line": 130,
            "description": "Toggle the LED on or off.",
            "itemtype": "method",
            "name": "toggle",
            "class": "BO.io.LED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/LED.js",
            "line": 138,
            "itemtype": "method",
            "name": "blink",
            "params": [
                {
                    "name": "interval",
                    "description": "The time interval to blink the LED.",
                    "type": "Number"
                },
                {
                    "name": "times",
                    "description": "The number of times the LED should blink.\nA value of 0 will blink forever.",
                    "type": "Number"
                },
                {
                    "name": "wave",
                    "description": "The waveform to apply (default is Oscillator.SQUARE)",
                    "type": "Function"
                }
            ],
            "see": [
                "BO.generator.Oscillator"
            ],
            "class": "BO.io.LED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/LED.js",
            "line": 163,
            "description": "Stop the LED blink cycle.",
            "itemtype": "method",
            "name": "stopBlinking",
            "class": "BO.io.LED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/LED.js",
            "line": 174,
            "description": "The LED must be connected to a PWM pin to use this method.",
            "itemtype": "method",
            "name": "fadeIn",
            "params": [
                {
                    "name": "time",
                    "description": "The fade-in time (in milliseconds).",
                    "type": "Number"
                }
            ],
            "class": "BO.io.LED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/LED.js",
            "line": 184,
            "description": "The LED must be connected to a PWM pin to use this method.",
            "itemtype": "method",
            "name": "fadeOut",
            "params": [
                {
                    "name": "time",
                    "description": "The fade-out time (in milliseconds).",
                    "type": "Number"
                }
            ],
            "class": "BO.io.LED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/LED.js",
            "line": 194,
            "description": "The LED must be connected to a PWM pin to use this method.",
            "itemtype": "method",
            "name": "fadeTo",
            "params": [
                {
                    "name": "to",
                    "description": "The new intensity value to fade to.",
                    "type": "Number"
                },
                {
                    "name": "time",
                    "description": "The fade time (in milliseconds).",
                    "type": "Number"
                }
            ],
            "class": "BO.io.LED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/LED.js",
            "line": 223,
            "itemtype": "property",
            "name": "LED.SOURCE_DRIVE",
            "static": 1,
            "class": "BO.io.LED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/LED.js",
            "line": 228,
            "itemtype": "property",
            "name": "LED.SYNC_DRIVE",
            "static": 1,
            "class": "BO.io.LED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 1,
            "description": "Copyright (c) 2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 78,
            "description": "[read-only] The heading in degrees.",
            "itemtype": "property",
            "name": "heading",
            "type": "Number",
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 87,
            "description": "[read-only] The x-axis measurement",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 94,
            "description": "[read-only] The y-axis measurement",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 101,
            "description": "[read-only] The z-axis measurement",
            "itemtype": "property",
            "name": "z",
            "type": "Number",
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 108,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "handleI2C",
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 148,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getHeading",
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 176,
            "description": "Get a tilt-compensated heading. Pitch and roll values from an accelerometer\nmust be passed to this method.\n\nNote: this method is not working properly. Marking it private until resolved",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getTiltCompensatedHeading",
            "params": [
                {
                    "name": "pitch",
                    "description": "The pitch value (supplied by an accelerometer)",
                    "type": "Number"
                },
                {
                    "name": "roll",
                    "description": "The roll value (supplied by an accelerometer)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "tilt-compensated heading direction",
                "type": "Number"
            },
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 205,
            "description": "Start continuous reading of the sensor.",
            "itemtype": "method",
            "name": "startReading",
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 216,
            "description": "Stop continuous reading of the sensor.",
            "itemtype": "method",
            "name": "stopReading",
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 227,
            "description": "Sends read request to magnetometer and updates magnetometer values.",
            "itemtype": "method",
            "name": "update",
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 239,
            "description": "for debugging",
            "access": "private",
            "tagname": "",
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 251,
            "itemtype": "property",
            "name": "MagnetometerHMC5883.DEVICE_ID",
            "static": 1,
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 257,
            "itemtype": "property",
            "name": "MagnetometerHMC5883.SAMPLES_1",
            "static": 1,
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 262,
            "itemtype": "property",
            "name": "MagnetometerHMC5883.SAMPLES_2",
            "static": 1,
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 267,
            "itemtype": "property",
            "name": "MagnetometerHMC5883.SAMPLES_4",
            "static": 1,
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 272,
            "itemtype": "property",
            "name": "MagnetometerHMC5883.SAMPLES_8",
            "static": 1,
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 278,
            "itemtype": "property",
            "name": "MagnetometerHMC5883.HZ_0_75",
            "static": 1,
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 283,
            "itemtype": "property",
            "name": "MagnetometerHMC5883.HZ_1_5",
            "static": 1,
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 288,
            "itemtype": "property",
            "name": "MagnetometerHMC5883.HZ_3",
            "static": 1,
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 293,
            "itemtype": "property",
            "name": "MagnetometerHMC5883.HZ_7_5",
            "static": 1,
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 298,
            "itemtype": "property",
            "name": "MagnetometerHMC5883.HZ_15",
            "static": 1,
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 303,
            "itemtype": "property",
            "name": "MagnetometerHMC5883.HZ_30",
            "static": 1,
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 308,
            "itemtype": "property",
            "name": "MagnetometerHMC5883.HZ_75",
            "static": 1,
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetoMeterHMC5883.js",
            "line": 317,
            "description": "The update event is dispatched when the compass heading is updated.",
            "type": "BO.io.MagnetometerEvent.UPDATE",
            "itemtype": "event",
            "name": "update",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the MagnetometerHMC5883 object.",
                    "type": "BO.io.MagnetometerHMC5883"
                }
            ],
            "class": "BO.io.MagnetometerHMC5883",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetometerEvent.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.MagnetometerEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/MagnetometerEvent.js",
            "line": 31,
            "itemtype": "property",
            "name": "MagnetometerEvent.UPDATE",
            "static": 1,
            "class": "BO.io.MagnetometerEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/PotEvent.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.PotEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/PotEvent.js",
            "line": 33,
            "itemtype": "property",
            "name": "PotEvent.CHANGE",
            "static": 1,
            "class": "BO.io.PotEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Potentiometer.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.Potentiometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Potentiometer.js",
            "line": 58,
            "description": "[read-only] The current value of the potentiometer.",
            "itemtype": "property",
            "name": "value",
            "type": "Number",
            "class": "BO.io.Potentiometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Potentiometer.js",
            "line": 65,
            "description": "[read-only] Get the (pre-filtered) average value of the potentiometer.",
            "itemtype": "property",
            "name": "average",
            "type": "Number",
            "class": "BO.io.Potentiometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Potentiometer.js",
            "line": 72,
            "description": "[read-only] Get the value of the potentiometer before filters are\napplied.",
            "itemtype": "property",
            "name": "preFilterValue",
            "type": "Number",
            "class": "BO.io.Potentiometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Potentiometer.js",
            "line": 80,
            "description": "[read-only] Get the (pre-filtered) minimum value read by the\npotentiometer.",
            "itemtype": "property",
            "name": "minimum",
            "type": "Number",
            "class": "BO.io.Potentiometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Potentiometer.js",
            "line": 88,
            "description": "[read-only] Get the (pre-filtered) maximum value read by the\npotentiometer.",
            "itemtype": "property",
            "name": "maximum",
            "type": "Number",
            "class": "BO.io.Potentiometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Potentiometer.js",
            "line": 96,
            "description": "Resets the minimum, maximum, and average values.",
            "itemtype": "method",
            "name": "clear",
            "class": "BO.io.Potentiometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Potentiometer.js",
            "line": 104,
            "description": "Scale from the minimum and maximum input values to 0.0 -> 1.0. This is\nuseful for sensors such as a flex sensor that may not return the full\nrange of 0 to 1.",
            "itemtype": "method",
            "name": "setRange",
            "params": [
                {
                    "name": "minimum",
                    "description": "The new minimum range (must be less than the maximum).",
                    "type": "Number"
                },
                {
                    "name": "maximum",
                    "description": "The new maximum range.",
                    "type": "Number"
                }
            ],
            "class": "BO.io.Potentiometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Potentiometer.js",
            "line": 119,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onPinChange",
            "class": "BO.io.Potentiometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Potentiometer.js",
            "line": 129,
            "description": "The change event is dispatched when the potentiometer value changes.",
            "example": [
                "\n    pot.addEventListener(PotEvent.CHANGE, onValueChange);\n\n    function onValueChange(event) {\n        console.log(\"value = \" + event.target.value);  \n    }"
            ],
            "type": "BO.io.PotEvent.CHANGE",
            "itemtype": "event",
            "name": "change",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the Potentiometer object",
                    "type": "BO.Potentiometer"
                }
            ],
            "class": "BO.io.Potentiometer",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/RGBLED.js",
            "line": 1,
            "description": "Based on RGBLED.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.RGBLED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/RGBLED.js",
            "line": 72,
            "description": "Set the RGBLED color.",
            "itemtype": "method",
            "name": "setColor",
            "params": [
                {
                    "name": "red",
                    "description": "The red value (0 - 255)",
                    "type": "Number"
                },
                {
                    "name": "green",
                    "description": "The green value (0 - 255)",
                    "type": "Number"
                },
                {
                    "name": "blue",
                    "description": "The blue value (0 - 255)",
                    "type": "Number"
                }
            ],
            "class": "BO.io.RGBLED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/RGBLED.js",
            "line": 90,
            "description": "Fade in the RGBLED from the off state.",
            "itemtype": "method",
            "name": "fadeIn",
            "params": [
                {
                    "name": "time",
                    "description": "The time of the fade (in milliseconds)",
                    "type": "Number"
                }
            ],
            "class": "BO.io.RGBLED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/RGBLED.js",
            "line": 103,
            "description": "Fade out the RGBLED from the on state.",
            "itemtype": "method",
            "name": "fadeOut",
            "params": [
                {
                    "name": "time",
                    "description": "The time of the fade (in milliseconds)",
                    "type": "Number"
                }
            ],
            "class": "BO.io.RGBLED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/RGBLED.js",
            "line": 116,
            "description": "Fade from the current color to the new color.",
            "itemtype": "method",
            "name": "fadeTo",
            "params": [
                {
                    "name": "red",
                    "description": "The red value to fade to (0 - 255)",
                    "type": "Number"
                },
                {
                    "name": "green",
                    "description": "The green value to fade to (0 - 255)",
                    "type": "Number"
                },
                {
                    "name": "blue",
                    "description": "The blue value to fade to (0 - 255)",
                    "type": "Number"
                },
                {
                    "name": "time",
                    "description": "The time of the fade (in milliseconds)",
                    "type": "Number"
                }
            ],
            "class": "BO.io.RGBLED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/RGBLED.js",
            "line": 137,
            "itemtype": "property",
            "name": "RGBLED.COMMON_ANODE",
            "static": 1,
            "class": "BO.io.RGBLED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/RGBLED.js",
            "line": 142,
            "itemtype": "property",
            "name": "RGBLED.COMMON_CATHODE",
            "static": 1,
            "class": "BO.io.RGBLED",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Servo.js",
            "line": 1,
            "description": "Based on Servo.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.Servo",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Servo.js",
            "line": 60,
            "description": "Set the angle (in degrees) to rotate the server head to.\n\n<p>If you are using a continuous rotation servo, a value of 90\nwill stop the servo. A value of 0 (or < 90 depending on the servo) \nwill cause continous clockwise rotation and a value of 180 (or > 90)\nwill cause continuous counter-clockwise rotation. If your motor\ndoes not come to a full stop when setting 90 degrees, you will need\nto adjust the servo (there is typically a screw on the motor) to\nadjust</p>",
            "itemtype": "property",
            "name": "angle",
            "type": "Number",
            "class": "BO.io.Servo",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Servo.js",
            "line": 90,
            "description": "The scale to convert 0-1 (0-255 in 8bit) to 0-0.706 (0-180 in 8bit).",
            "itemtype": "property",
            "name": "Servo.COEF_TO_0_180",
            "static": 1,
            "class": "BO.io.Servo",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 79,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onPinChange",
            "params": [
                {
                    "name": "evt",
                    "description": "PinEvent.CHANGE",
                    "type": "Event"
                }
            ],
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 101,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setMinFlickMovement",
            "params": [
                {
                    "name": "touchPoint",
                    "description": "The value where the touch is occuring on the\nstrip",
                    "type": "Number"
                }
            ],
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 111,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "startTouch",
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 128,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onRelease",
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 166,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onMove",
            "params": [
                {
                    "name": "touchPoint",
                    "description": "The value where the touch is occuring on the\nstrip",
                    "type": "Number"
                }
            ],
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 215,
            "description": "Scale from the minimum and maximum input values to 0.0 -> 1.0.",
            "itemtype": "method",
            "name": "setRange",
            "params": [
                {
                    "name": "minimum",
                    "description": "The minimum value",
                    "type": "Number"
                },
                {
                    "name": "maximum",
                    "description": "The maximum value",
                    "type": "Number"
                }
            ],
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 227,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "dispatch",
            "type": "{Event} type The event type",
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 237,
            "description": "Reset whenever you need the next Touch point.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "resetForNext",
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 249,
            "description": "For debugging.",
            "access": "private",
            "tagname": "",
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 260,
            "description": "The current value.",
            "itemtype": "property",
            "name": "value",
            "type": "Number",
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 267,
            "description": "The current distance from the press point.",
            "itemtype": "property",
            "name": "distanceFromPressed",
            "type": "Number",
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 274,
            "description": "The minimum distance required to trigger a flick event. Change this\nvalue to fine tune the flick gesture.",
            "itemtype": "property",
            "name": "minFlickMovement",
            "type": "Number",
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 283,
            "description": "The minimum distance required to trigger a drag event. Change this\nvalue to fine tune the drag response.",
            "itemtype": "property",
            "name": "minDragMovement",
            "type": "Number",
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 292,
            "description": "The maximum time (in milliseconds) between a press and release in\norder to trigger a TAP event.",
            "itemtype": "property",
            "name": "tapTimeout",
            "type": "Number",
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 301,
            "description": "The minimum value required to set the Release state. This number should\nbe as close to zero as possible. Increase this value if you are noticing\nfluttering between the Pressed and Released states. Default value = 0.01;",
            "itemtype": "property",
            "name": "minValue",
            "type": "Number",
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 314,
            "description": "The softPotPressed event is dispatched when pressure is applied to \nthe softpot surface.",
            "type": "BO.io.SoftPotEvent.PRESS",
            "itemtype": "event",
            "name": "softPotPressed",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the SoftPot object",
                    "type": "BO.io.SoftPot"
                }
            ],
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 322,
            "description": "The softPotReleased event is dispatched when pressure is released from \nthe softpot surface.",
            "type": "BO.io.SoftPotEvent.RELEASE",
            "itemtype": "event",
            "name": "softPotReleased",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the SoftPot object",
                    "type": "BO.io.SoftPot"
                }
            ],
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 330,
            "description": "The softPotDrag event is dispatched when a drag is detected along \nthe length of the softpot sensor.",
            "type": "BO.io.SoftPotEvent.DRAG",
            "itemtype": "event",
            "name": "softPotDrag",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the SoftPot object",
                    "type": "BO.io.SoftPot"
                }
            ],
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 338,
            "description": "The softPotFlickUp event is dispatched when a flick gesture is detected\nin the direction of the sensor pins.",
            "type": "BO.io.SoftPotEvent.FLICK_UP",
            "itemtype": "event",
            "name": "softPotFlickUp",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the SoftPot object",
                    "type": "BO.io.SoftPot"
                }
            ],
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 346,
            "description": "The softPotFlickDown event is dispatched when a flick gesture is \ndetected in the direction away from the sensor pins.",
            "type": "BO.io.SoftPotEvent.FLICK_DOWN",
            "itemtype": "event",
            "name": "softPotFlickDown",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the SoftPot object",
                    "type": "BO.io.SoftPot"
                }
            ],
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPot.js",
            "line": 354,
            "description": "The softPotTap event is dispatched when a press and release occurs\nin in less than the duration specified by the tapTimeout property.",
            "type": "BO.io.SoftPotEvent.TAP",
            "itemtype": "event",
            "name": "softPotTap",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the SoftPot object",
                    "type": "BO.io.SoftPot"
                }
            ],
            "class": "BO.io.SoftPot",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPotEvent.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.SoftPotEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPotEvent.js",
            "line": 33,
            "itemtype": "property",
            "name": "SoftPotEvent.PRESS",
            "static": 1,
            "class": "BO.io.SoftPotEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPotEvent.js",
            "line": 38,
            "itemtype": "property",
            "name": "SoftPotEvent.RELEASE",
            "static": 1,
            "class": "BO.io.SoftPotEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPotEvent.js",
            "line": 43,
            "itemtype": "property",
            "name": "SoftPotEvent.DRAG",
            "static": 1,
            "class": "BO.io.SoftPotEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPotEvent.js",
            "line": 48,
            "itemtype": "property",
            "name": "SoftPotEvent.FLICK_UP",
            "static": 1,
            "class": "BO.io.SoftPotEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPotEvent.js",
            "line": 53,
            "itemtype": "property",
            "name": "SoftPotEvent.FLICK_DOWN",
            "static": 1,
            "class": "BO.io.SoftPotEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPotEvent.js",
            "line": 58,
            "itemtype": "property",
            "name": "SoftPotEvent.TAP",
            "static": 1,
            "class": "BO.io.SoftPotEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/SoftPotEvent.js",
            "line": 67,
            "description": "The value of the softpot.",
            "itemtype": "property",
            "name": "value",
            "type": "Number",
            "class": "BO.io.SoftPotEvent",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Stepper.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "BO.io.Stepper",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Stepper.js",
            "line": 140,
            "description": "Move the stepper a given number of steps at the specified\nspeed (rad/sec), acceleration (rad/sec^2) and deceleration (rad/sec^2).\nThe accel and decel parameters are optional but if using, both values\nmust be passed to the function.",
            "itemtype": "method",
            "name": "step",
            "params": [
                {
                    "name": "numSteps",
                    "description": "The number ofsteps to move the motor (max = +/-2097151 (21 bits)).\nPositive value is clockwise, negative value is counter clockwise.",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "Max speed in rad/sec (1 rad/sec = 9.549 RPM)\n(max precision of 2 decimal places)",
                    "type": "Number"
                },
                {
                    "name": "accel",
                    "description": "[optional] Acceleration in rad/sec^2 (max precision of 2 decimal places)",
                    "type": "Number"
                },
                {
                    "name": "decel",
                    "description": "[optional] Deceleration in rad/sec^2 (max precision of 2 decimal places)",
                    "type": "Number"
                }
            ],
            "class": "BO.io.Stepper",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Stepper.js",
            "line": 235,
            "description": "Listen for stepping complete event",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onSysExMessage",
            "class": "BO.io.Stepper",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Stepper.js",
            "line": 253,
            "description": "[read-only] The id of the Stepper object instance. Each stepper motor\nis given a unique id upon initialization.",
            "itemtype": "property",
            "name": "id",
            "type": "Number",
            "class": "BO.io.Stepper",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Stepper.js",
            "line": 265,
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to be called when the event is fired",
                    "type": "Function"
                }
            ],
            "class": "BO.io.Stepper",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Stepper.js",
            "line": 273,
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to be called when the event is fired",
                    "type": "Function"
                }
            ],
            "class": "BO.io.Stepper",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Stepper.js",
            "line": 281,
            "params": [
                {
                    "name": "type",
                    "description": "The event type\nreturn {boolean} True is listener exists for this type, false if not.",
                    "type": "String"
                }
            ],
            "class": "BO.io.Stepper",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Stepper.js",
            "line": 289,
            "params": [
                {
                    "name": "type",
                    "description": "The Event object",
                    "type": "Event"
                },
                {
                    "name": "optionalParams",
                    "description": "Optional parameters to assign to the event object.\nreturn {boolean} True if dispatch is successful, false if not.",
                    "type": "Object"
                }
            ],
            "class": "BO.io.Stepper",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Stepper.js",
            "line": 300,
            "itemtype": "property",
            "name": "Stepper.CLOCKWISE",
            "static": 1,
            "class": "BO.io.Stepper",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Stepper.js",
            "line": 305,
            "itemtype": "property",
            "name": "Stepper.COUNTER_CLOCKWISE",
            "static": 1,
            "class": "BO.io.Stepper",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Stepper.js",
            "line": 310,
            "itemtype": "property",
            "name": "Stepper.DRIVER",
            "static": 1,
            "class": "BO.io.Stepper",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Stepper.js",
            "line": 315,
            "itemtype": "property",
            "name": "Stepper.TWO_WIRE",
            "static": 1,
            "class": "BO.io.Stepper",
            "namespace": "BO.io"
        },
        {
            "file": "src/io/Stepper.js",
            "line": 320,
            "itemtype": "property",
            "name": "Stepper.FOUR_WIRE",
            "static": 1,
            "class": "BO.io.Stepper",
            "namespace": "BO.io"
        },
        {
            "file": "src/utils/Event.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "JSUTILS.Event",
            "namespace": "BO.io"
        },
        {
            "file": "src/utils/Event.js",
            "line": 8,
            "class": "JSUTILS.Event",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/Event.js",
            "line": 34,
            "description": "The event type",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "JSUTILS.Event",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/Event.js",
            "line": 46,
            "description": "The event target",
            "itemtype": "property",
            "name": "target",
            "type": "Object",
            "class": "JSUTILS.Event",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/Event.js",
            "line": 62,
            "itemtype": "property",
            "name": "Event.CONNECTED",
            "static": 1,
            "class": "JSUTILS.Event",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/Event.js",
            "line": 67,
            "itemtype": "property",
            "name": "Event.CHANGE",
            "static": 1,
            "class": "JSUTILS.Event",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/Event.js",
            "line": 72,
            "itemtype": "property",
            "name": "Event.COMPLETE",
            "static": 1,
            "class": "JSUTILS.Event",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/EventDispatcher.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "JSUTILS.EventDispatcher",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/EventDispatcher.js",
            "line": 37,
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to be called when the event\nis fired",
                    "type": "Function"
                }
            ],
            "class": "JSUTILS.EventDispatcher",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/EventDispatcher.js",
            "line": 50,
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to be called when the event\nis fired",
                    "type": "Function"
                }
            ],
            "class": "JSUTILS.EventDispatcher",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/EventDispatcher.js",
            "line": 65,
            "itemtype": "method",
            "name": "hasEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The event type\nreturn {boolean} True is listener exists for this type, false if not.",
                    "type": "String"
                }
            ],
            "class": "JSUTILS.EventDispatcher",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/EventDispatcher.js",
            "line": 78,
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The Event object.",
                    "type": "Event"
                },
                {
                    "name": "optionalParams",
                    "description": "Optional parameters passed as an object.\nreturn {boolean} True if dispatch is successful, false if not.",
                    "type": "Object"
                }
            ],
            "class": "JSUTILS.EventDispatcher",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/JSUTILS.js",
            "line": 1,
            "description": "This creates a namespace for common javascript utility objects and also\ncontains a few utility functions.\n\ninherit() method copied from Flanagan, David. JavaScript: The Definitive Guide.",
            "class": "JSUTILS.SignalScope",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/JSUTILS.js",
            "line": 8,
            "description": "Namespace and utility functions",
            "class": "JSUTILS.SignalScope",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/JSUTILS.js",
            "line": 17,
            "description": "Use this function to safely create a new namespace\nif a namespace already exists, it won't be recreated.",
            "params": [
                {
                    "name": "namespaceString",
                    "description": "The namespace as a string.",
                    "type": "String"
                }
            ],
            "class": "JSUTILS.SignalScope",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/JSUTILS.js",
            "line": 38,
            "description": "Use this method rather than Object.create() directly if\nbrowser compatibility is unknown.",
            "params": [
                {
                    "name": "p",
                    "description": "The prototype of the object to inherit.",
                    "type": "Object"
                }
            ],
            "class": "JSUTILS.SignalScope",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/JSUTILS.js",
            "line": 64,
            "description": "add bind for browsers that don't support it (Safari)",
            "access": "private",
            "tagname": "",
            "class": "JSUTILS.SignalScope",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/JSUTILS.js",
            "line": 76,
            "access": "private",
            "tagname": "",
            "class": "JSUTILS.SignalScope",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/JSUTILS.js",
            "line": 80,
            "access": "private",
            "tagname": "",
            "class": "JSUTILS.SignalScope",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/SignalScope.js",
            "line": 1,
            "description": "Based on SignalScope.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "class": "JSUTILS.SignalScope",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/SignalScope.js",
            "line": 62,
            "description": "Call this method at the desired frame rate in order\nto draw the input signal.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "input1",
                    "description": "The channel 1 input signal",
                    "type": "Number"
                },
                {
                    "name": "input2",
                    "description": "[optional] The channel 2 input signal",
                    "type": "Number"
                }
            ],
            "class": "JSUTILS.SignalScope",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/SignalScope.js",
            "line": 86,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "drawChannel",
            "class": "JSUTILS.SignalScope",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/SignalScope.js",
            "line": 106,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "drawMarkers",
            "class": "JSUTILS.SignalScope",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/SignalScope.js",
            "line": 126,
            "description": "Add a horizontal marker to the scope. 1 or more markers can be added.",
            "itemtype": "method",
            "name": "addMarker",
            "params": [
                {
                    "name": "level",
                    "description": "The value of the marker within the input value range.",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "The hex color value for the marker.",
                    "type": "String"
                }
            ],
            "class": "JSUTILS.SignalScope",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/SignalScope.js",
            "line": 139,
            "description": "Remove all markers from the scope.",
            "removeallmarkers": "",
            "class": "JSUTILS.SignalScope",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/Timer.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "JSUTILS.Timer",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/Timer.js",
            "line": 45,
            "description": "The delay interval in milliseconds.",
            "itemtype": "property",
            "name": "delay",
            "type": "Number",
            "class": "JSUTILS.Timer",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/Timer.js",
            "line": 62,
            "description": "The repeat count in milliseconds.",
            "itemtype": "property",
            "name": "repeatCount",
            "type": "Number",
            "class": "JSUTILS.Timer",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/Timer.js",
            "line": 79,
            "description": "[read-only] Returns true if the timer is running.",
            "itemtype": "property",
            "name": "running",
            "type": "Number",
            "class": "JSUTILS.Timer",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/Timer.js",
            "line": 89,
            "description": "[read-only] Returns the current count (number of ticks since timer\nstarted).",
            "itemtype": "property",
            "name": "currentCount",
            "type": "Number",
            "class": "JSUTILS.Timer",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/Timer.js",
            "line": 100,
            "description": "Start the timer.",
            "itemtype": "method",
            "name": "start",
            "class": "JSUTILS.Timer",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/Timer.js",
            "line": 111,
            "description": "Stop the timer and reset the count to zero.",
            "itemtype": "method",
            "name": "reset",
            "class": "JSUTILS.Timer",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/Timer.js",
            "line": 120,
            "description": "Stop the timer.",
            "itemtype": "method",
            "name": "stop",
            "class": "JSUTILS.Timer",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/Timer.js",
            "line": 132,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onTick",
            "class": "JSUTILS.Timer",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/Timer.js",
            "line": 148,
            "description": "The timerTick event is dispatched at the rate specified \nby the delay interval.",
            "type": "JSUTILS.TimerEvent.TIMER",
            "itemtype": "event",
            "name": "timerTick",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the Timer object.",
                    "type": "JSUTILS.Timer"
                }
            ],
            "class": "JSUTILS.Timer",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/Timer.js",
            "line": 156,
            "description": "The timerComplete event is dispatched when the repeatCount value",
            "type": "JSUTILS.TimerEvent.TIMER_COMPLETE",
            "itemtype": "event",
            "name": "timerComplete",
            "params": [
                {
                    "name": "target",
                    "description": "A reference to the Timer object.",
                    "type": "JSUTILS.Timer"
                }
            ],
            "class": "JSUTILS.Timer",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/TimerEvent.js",
            "line": 1,
            "description": "Copyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "class": "JSUTILS.TimerEvent",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/TimerEvent.js",
            "line": 30,
            "itemtype": "property",
            "name": "TimerEvent.TIMER",
            "static": 1,
            "class": "JSUTILS.TimerEvent",
            "namespace": "JSUTILS"
        },
        {
            "file": "src/utils/TimerEvent.js",
            "line": 35,
            "itemtype": "property",
            "name": "TimerEvent.TIMER_COMPLETE",
            "static": 1,
            "class": "JSUTILS.TimerEvent",
            "namespace": "JSUTILS"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: version",
            "line": " src/core/core.js:7"
        },
        {
            "message": "unknown tag: name",
            "line": " src/core/core.js:23"
        },
        {
            "message": "unknown tag: exports",
            "line": " src/io/SoftPotEvent.js:15"
        },
        {
            "message": "unknown tag: removeallmarkers",
            "line": " src/utils/SignalScope.js:139"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/core/I2CBase.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/core/I2CBase.js:8"
        },
        {
            "message": "Missing item type",
            "line": " src/core/I2CBase.js:40"
        },
        {
            "message": "Missing item type",
            "line": " src/core/I2CBase.js:47"
        },
        {
            "message": "Missing item type",
            "line": " src/core/I2CBase.js:86"
        },
        {
            "message": "Missing item type",
            "line": " src/core/I2CBase.js:164"
        },
        {
            "message": "Missing item type",
            "line": " src/core/I2CBase.js:172"
        },
        {
            "message": "Missing item type",
            "line": " src/core/I2CBase.js:180"
        },
        {
            "message": "Missing item type",
            "line": " src/core/I2CBase.js:188"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2013 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/core/IOBoard.js:1"
        },
        {
            "message": "Missing item type\nfor debugging",
            "line": " src/core/IOBoard.js:891"
        },
        {
            "message": "Missing item type",
            "line": " src/core/IOBoard.js:1413"
        },
        {
            "message": "Missing item type",
            "line": " src/core/IOBoard.js:1422"
        },
        {
            "message": "Missing item type",
            "line": " src/core/IOBoard.js:1431"
        },
        {
            "message": "Missing item type",
            "line": " src/core/IOBoard.js:1439"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/core/IOBoardEvent.js:1"
        },
        {
            "message": "Missing item type\nBased on PhysicalInput.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/core/PhysicalInputBase.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/core/PhysicalInputBase.js:43"
        },
        {
            "message": "Missing item type",
            "line": " src/core/PhysicalInputBase.js:51"
        },
        {
            "message": "Missing item type",
            "line": " src/core/PhysicalInputBase.js:59"
        },
        {
            "message": "Missing item type",
            "line": " src/core/PhysicalInputBase.js:67"
        },
        {
            "message": "Missing item type\nBased on Pin.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/core/Pin.js:1"
        },
        {
            "message": "Missing item type\nThe analogNumber sould only be set internally.",
            "line": " src/core/Pin.js:67"
        },
        {
            "message": "Missing item type\nThe maximum PWM value supported for this pin. This value should\nnormally be set internally.",
            "line": " src/core/Pin.js:95"
        },
        {
            "message": "Missing item type\nSets the state value. This is populated by the \nprocessPinStateResponse method of the IOBoard object. It should not\nbe called manually.",
            "line": " src/core/Pin.js:104"
        },
        {
            "message": "Missing item type\nSet the pin type. This method should only be used internally.",
            "line": " src/core/Pin.js:251"
        },
        {
            "message": "Missing item type\nThis method should only be used internally.",
            "line": " src/core/Pin.js:271"
        },
        {
            "message": "Missing item type",
            "line": " src/core/Pin.js:444"
        },
        {
            "message": "Missing item type",
            "line": " src/core/Pin.js:453"
        },
        {
            "message": "Missing item type",
            "line": " src/core/Pin.js:462"
        },
        {
            "message": "Missing item type",
            "line": " src/core/Pin.js:470"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/core/PinEvent.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/core/WSocketEvent.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/core/WSocketWrapper.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/core/WSocketWrapper.js:60"
        },
        {
            "message": "Missing item type",
            "line": " src/core/WSocketWrapper.js:67"
        },
        {
            "message": "Missing item type",
            "line": " src/core/WSocketWrapper.js:92"
        },
        {
            "message": "Missing item type",
            "line": " src/core/WSocketWrapper.js:96"
        },
        {
            "message": "Missing item type",
            "line": " src/core/WSocketWrapper.js:100"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/core/core.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/core/core.js:7"
        },
        {
            "message": "Missing item type\nThe BO.enableDebugging flag can be set to true in an application\nto print debug messages from various Breakout objects to the\nconsole. By default it is false and only needs to be included\nin an application if you intend to set it to true",
            "line": " src/core/core.js:23"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/custom/ID12RFIDReader.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/custom/ID12RFIDReader.js:8"
        },
        {
            "message": "Missing item type",
            "line": " src/custom/ID12RFIDReader.js:127"
        },
        {
            "message": "Missing item type",
            "line": " src/custom/ID12RFIDReader.js:135"
        },
        {
            "message": "Missing item type",
            "line": " src/custom/ID12RFIDReader.js:143"
        },
        {
            "message": "Missing item type",
            "line": " src/custom/ID12RFIDReader.js:151"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/custom/RFIDEvent.js:1"
        },
        {
            "message": "Missing item type\nBased on Convolution.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/filters/Convolution.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/filters/Convolution.js:14"
        },
        {
            "message": "Missing item type\nOverride FilterBase.processSample",
            "line": " src/filters/Convolution.js:68"
        },
        {
            "message": "Missing item type\nBased on IFilter.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/filters/FilterBase.js:1"
        },
        {
            "message": "Missing item type\nBased on Scaler.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/filters/Scaler.js:1"
        },
        {
            "message": "Missing item type\nOverride FilterBase.processSample",
            "line": " src/filters/Scaler.js:55"
        },
        {
            "message": "Missing item type\nBased on SetPoint.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/filters/TriggerPoint.js:1"
        },
        {
            "message": "Missing item type\nOverride FilterBase.processSample",
            "line": " src/filters/TriggerPoint.js:64"
        },
        {
            "message": "Missing item type\nBased on IGenerator.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <jeff.hoefs@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/generators/GeneratorBase.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/generators/GeneratorBase.js:14"
        },
        {
            "message": "Missing item type\nUse setValue() instead?",
            "line": " src/generators/GeneratorBase.js:55"
        },
        {
            "message": "Missing item type\nBased on GeneratorEvent.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/generators/GeneratorEvent.js:1"
        },
        {
            "message": "Missing item type\nBased on Osc.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/generators/Oscillator.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/AccelerometerADXL345.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/io/AccelerometerADXL345.js:8"
        },
        {
            "message": "Missing item type\nfor debugging",
            "line": " src/io/AccelerometerADXL345.js:378"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/AccelerometerEvent.js:1"
        },
        {
            "message": "Missing item type\nBased on Accelerometer.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/AnalogAccelerometer.js:1"
        },
        {
            "message": "Missing item type\nBased on RGBLED.js which was written by Jeff Hoefs.\n\nCopyright (c) 2012-2013 Fabian Affolter <mail@fabian-affolter.ch>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/BiColorLED.js:1"
        },
        {
            "message": "Missing item type\nBased on BlinkM.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/BlinkM.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/Button.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/ButtonEvent.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/CompassEvent.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/CompassHMC6352.js:1"
        },
        {
            "message": "Missing item type\nBased on DCMotor.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/DCMotor.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/GyroEvent.js:1"
        },
        {
            "message": "Missing item type\nBased in part on Filipe Vieira'a ITG3200 library for Arduino.\n\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/GyroITG3200.js:1"
        },
        {
            "message": "Missing item type\nfor debugging",
            "line": " src/io/GyroITG3200.js:318"
        },
        {
            "message": "Missing item type\nBased on LED.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/LED.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/MagnetoMeterHMC5883.js:1"
        },
        {
            "message": "Missing item type\nfor debugging",
            "line": " src/io/MagnetoMeterHMC5883.js:239"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/MagnetometerEvent.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/PotEvent.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/Potentiometer.js:1"
        },
        {
            "message": "Missing item type\nBased on RGBLED.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/RGBLED.js:1"
        },
        {
            "message": "Missing item type\nBased on Servo.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nPorted to JavaScript by Jeff Hoefs\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/Servo.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/SoftPot.js:1"
        },
        {
            "message": "Missing item type\nFor debugging.",
            "line": " src/io/SoftPot.js:249"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/SoftPotEvent.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/io/Stepper.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/io/Stepper.js:265"
        },
        {
            "message": "Missing item type",
            "line": " src/io/Stepper.js:273"
        },
        {
            "message": "Missing item type",
            "line": " src/io/Stepper.js:281"
        },
        {
            "message": "Missing item type",
            "line": " src/io/Stepper.js:289"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/utils/Event.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/utils/Event.js:8"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/utils/EventDispatcher.js:1"
        },
        {
            "message": "Missing item type\nThis creates a namespace for common javascript utility objects and also\ncontains a few utility functions.\n\ninherit() method copied from Flanagan, David. JavaScript: The Definitive Guide.",
            "line": " src/utils/JSUTILS.js:1"
        },
        {
            "message": "Missing item type\nNamespace and utility functions",
            "line": " src/utils/JSUTILS.js:8"
        },
        {
            "message": "Missing item type\nUse this function to safely create a new namespace\nif a namespace already exists, it won't be recreated.",
            "line": " src/utils/JSUTILS.js:17"
        },
        {
            "message": "Missing item type\nUse this method rather than Object.create() directly if\nbrowser compatibility is unknown.",
            "line": " src/utils/JSUTILS.js:38"
        },
        {
            "message": "Missing item type\nadd bind for browsers that don't support it (Safari)",
            "line": " src/utils/JSUTILS.js:64"
        },
        {
            "message": "Missing item type",
            "line": " src/utils/JSUTILS.js:76"
        },
        {
            "message": "Missing item type",
            "line": " src/utils/JSUTILS.js:80"
        },
        {
            "message": "Missing item type\nBased on SignalScope.as originally written in as3.\nCopyright (c) the Funnel development team\nhttp://www.funnel.cc\n\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\n\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/utils/SignalScope.js:1"
        },
        {
            "message": "Missing item type\nRemove all markers from the scope.",
            "line": " src/utils/SignalScope.js:139"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/utils/Timer.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011-2012 Jeff Hoefs <soundanalogous@gmail.com>\nReleased under the MIT license. See LICENSE file for details.",
            "line": " src/utils/TimerEvent.js:1"
        }
    ]
}